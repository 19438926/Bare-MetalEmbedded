
FlashLED_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004068  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004218  08004218  00014218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004270  08004270  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004278  08004278  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004278  08004278  00014278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800427c  0800427c  0001427c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004974  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004984  20004984  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de23  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002357  00000000  00000000  0002de63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c10  00000000  00000000  000301c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b18  00000000  00000000  00030dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000025c3  00000000  00000000  000318e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c958  00000000  00000000  00033eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d85c2  00000000  00000000  00040803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00118dc5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030cc  00000000  00000000  00118e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004200 	.word	0x08004200

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	08004200 	.word	0x08004200

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 f968 	bl	80007cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f820 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f87e 	bl	8000600 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f001 f8f2 	bl	80016ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000508:	4a09      	ldr	r2, [pc, #36]	; (8000530 <main+0x3c>)
 800050a:	2100      	movs	r1, #0
 800050c:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x40>)
 800050e:	f001 f937 	bl	8001780 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a08      	ldr	r2, [pc, #32]	; (8000538 <main+0x44>)
 8000516:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  defaultTaskHandle = osThreadNew(StartSecondaryTask, NULL, &defaultTask_attributes);
 8000518:	4a05      	ldr	r2, [pc, #20]	; (8000530 <main+0x3c>)
 800051a:	2100      	movs	r1, #0
 800051c:	4807      	ldr	r0, [pc, #28]	; (800053c <main+0x48>)
 800051e:	f001 f92f 	bl	8001780 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a04      	ldr	r2, [pc, #16]	; (8000538 <main+0x44>)
 8000526:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000528:	f001 f904 	bl	8001734 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x38>
 800052e:	bf00      	nop
 8000530:	0800423c 	.word	0x0800423c
 8000534:	08000669 	.word	0x08000669
 8000538:	2000002c 	.word	0x2000002c
 800053c:	08000689 	.word	0x08000689

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	; 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	; 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fe4e 	bl	80041f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <SystemClock_Config+0xb8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a22      	ldr	r2, [pc, #136]	; (80005f8 <SystemClock_Config+0xb8>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <SystemClock_Config+0xb8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <SystemClock_Config+0xbc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <SystemClock_Config+0xbc>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b19      	ldr	r3, [pc, #100]	; (80005fc <SystemClock_Config+0xbc>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2310      	movs	r3, #16
 80005aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fc41 	bl	8000e3c <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005c0:	f000 f872 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005d8:	f107 030c 	add.w	r3, r7, #12
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f000 fea4 	bl	800132c <HAL_RCC_ClockConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005ea:	f000 f85d 	bl	80006a8 <Error_Handler>
  }
}
 80005ee:	bf00      	nop
 80005f0:	3750      	adds	r7, #80	; 0x50
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000606:	1d3b      	adds	r3, r7, #4
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_GPIO_Init+0x60>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	4a10      	ldr	r2, [pc, #64]	; (8000660 <MX_GPIO_Init+0x60>)
 800061e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000622:	6313      	str	r3, [r2, #48]	; 0x30
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_GPIO_Init+0x60>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GREEM_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <MX_GPIO_Init+0x64>)
 8000638:	f000 fbcc 	bl	8000dd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEM_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEM_LED_Pin|RED_LED_Pin;
 800063c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000640:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4619      	mov	r1, r3
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_GPIO_Init+0x64>)
 8000654:	f000 fa12 	bl	8000a7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000658:	bf00      	nop
 800065a:	3718      	adds	r7, #24
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40023800 	.word	0x40023800
 8000664:	40021800 	.word	0x40021800

08000668 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GREEM_LED_GPIO_Port, GREEM_LED_Pin);
 8000670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <StartDefaultTask+0x1c>)
 8000676:	f000 fbc6 	bl	8000e06 <HAL_GPIO_TogglePin>
	  osDelay(1);
 800067a:	2001      	movs	r0, #1
 800067c:	f001 f912 	bl	80018a4 <osDelay>
	  HAL_GPIO_TogglePin(GREEM_LED_GPIO_Port, GREEM_LED_Pin);
 8000680:	e7f6      	b.n	8000670 <StartDefaultTask+0x8>
 8000682:	bf00      	nop
 8000684:	40021800 	.word	0x40021800

08000688 <StartSecondaryTask>:
  }
  /* USER CODE END 5 */
}
void StartSecondaryTask(void *argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]

  for(;;)
  {
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8000690:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <StartSecondaryTask+0x1c>)
 8000696:	f000 fbb6 	bl	8000e06 <HAL_GPIO_TogglePin>
	  osDelay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f001 f902 	bl	80018a4 <osDelay>
	  HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 80006a0:	e7f6      	b.n	8000690 <StartSecondaryTask+0x8>
 80006a2:	bf00      	nop
 80006a4:	40021800 	.word	0x40021800

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_MspInit+0x54>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a11      	ldr	r2, [pc, #68]	; (8000708 <HAL_MspInit+0x54>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_MspInit+0x54>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <HAL_MspInit+0x54>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <HAL_MspInit+0x54>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6413      	str	r3, [r2, #64]	; 0x40
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <HAL_MspInit+0x54>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006f2:	2200      	movs	r2, #0
 80006f4:	210f      	movs	r1, #15
 80006f6:	f06f 0001 	mvn.w	r0, #1
 80006fa:	f000 f996 	bl	8000a2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006fe:	bf00      	nop
 8000700:	3708      	adds	r7, #8
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000710:	e7fe      	b.n	8000710 <NMI_Handler+0x4>

08000712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000712:	b480      	push	{r7}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000716:	e7fe      	b.n	8000716 <HardFault_Handler+0x4>

08000718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800071c:	e7fe      	b.n	800071c <MemManage_Handler+0x4>

0800071e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <BusFault_Handler+0x4>

08000724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <UsageFault_Handler+0x4>

0800072a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072e:	bf00      	nop
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr

08000738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800073c:	f000 f898 	bl	8000870 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000740:	f002 fcbe 	bl	80030c0 <xTaskGetSchedulerState>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d001      	beq.n	800074e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800074a:	f003 faa5 	bl	8003c98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <SystemInit+0x20>)
 800075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800075e:	4a05      	ldr	r2, [pc, #20]	; (8000774 <SystemInit+0x20>)
 8000760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000ed00 	.word	0xe000ed00

08000778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800077e:	490e      	ldr	r1, [pc, #56]	; (80007b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000780:	4a0e      	ldr	r2, [pc, #56]	; (80007bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000784:	e002      	b.n	800078c <LoopCopyDataInit>

08000786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078a:	3304      	adds	r3, #4

0800078c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800078c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000790:	d3f9      	bcc.n	8000786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000794:	4c0b      	ldr	r4, [pc, #44]	; (80007c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000798:	e001      	b.n	800079e <LoopFillZerobss>

0800079a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800079c:	3204      	adds	r2, #4

0800079e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a0:	d3fb      	bcc.n	800079a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007a2:	f7ff ffd7 	bl	8000754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007a6:	f003 fcf1 	bl	800418c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007aa:	f7ff fea3 	bl	80004f4 <main>
  bx  lr    
 80007ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80007b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007bc:	08004280 	.word	0x08004280
  ldr r2, =_sbss
 80007c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007c4:	20004984 	.word	0x20004984

080007c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC_IRQHandler>
	...

080007cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <HAL_Init+0x40>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <HAL_Init+0x40>)
 80007d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <HAL_Init+0x40>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a0a      	ldr	r2, [pc, #40]	; (800080c <HAL_Init+0x40>)
 80007e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_Init+0x40>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <HAL_Init+0x40>)
 80007ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f4:	2003      	movs	r0, #3
 80007f6:	f000 f90d 	bl	8000a14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007fa:	200f      	movs	r0, #15
 80007fc:	f000 f808 	bl	8000810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000800:	f7ff ff58 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023c00 	.word	0x40023c00

08000810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_InitTick+0x54>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_InitTick+0x58>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4619      	mov	r1, r3
 8000822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000826:	fbb3 f3f1 	udiv	r3, r3, r1
 800082a:	fbb2 f3f3 	udiv	r3, r2, r3
 800082e:	4618      	mov	r0, r3
 8000830:	f000 f917 	bl	8000a62 <HAL_SYSTICK_Config>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800083a:	2301      	movs	r3, #1
 800083c:	e00e      	b.n	800085c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d80a      	bhi.n	800085a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000844:	2200      	movs	r2, #0
 8000846:	6879      	ldr	r1, [r7, #4]
 8000848:	f04f 30ff 	mov.w	r0, #4294967295
 800084c:	f000 f8ed 	bl	8000a2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000850:	4a06      	ldr	r2, [pc, #24]	; (800086c <HAL_InitTick+0x5c>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000856:	2300      	movs	r3, #0
 8000858:	e000      	b.n	800085c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000000 	.word	0x20000000
 8000868:	20000008 	.word	0x20000008
 800086c:	20000004 	.word	0x20000004

08000870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_IncTick+0x20>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	461a      	mov	r2, r3
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_IncTick+0x24>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4413      	add	r3, r2
 8000880:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_IncTick+0x24>)
 8000882:	6013      	str	r3, [r2, #0]
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	20000008 	.word	0x20000008
 8000894:	20000030 	.word	0x20000030

08000898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return uwTick;
 800089c:	4b03      	ldr	r3, [pc, #12]	; (80008ac <HAL_GetTick+0x14>)
 800089e:	681b      	ldr	r3, [r3, #0]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000030 	.word	0x20000030

080008b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c0:	4b0c      	ldr	r3, [pc, #48]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008c2:	68db      	ldr	r3, [r3, #12]
 80008c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008e2:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <__NVIC_SetPriorityGrouping+0x44>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	60d3      	str	r3, [r2, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <__NVIC_GetPriorityGrouping+0x18>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	0a1b      	lsrs	r3, r3, #8
 8000902:	f003 0307 	and.w	r3, r3, #7
}
 8000906:	4618      	mov	r0, r3
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	db0a      	blt.n	800093e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b2da      	uxtb	r2, r3
 800092c:	490c      	ldr	r1, [pc, #48]	; (8000960 <__NVIC_SetPriority+0x4c>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	0112      	lsls	r2, r2, #4
 8000934:	b2d2      	uxtb	r2, r2
 8000936:	440b      	add	r3, r1
 8000938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800093c:	e00a      	b.n	8000954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4908      	ldr	r1, [pc, #32]	; (8000964 <__NVIC_SetPriority+0x50>)
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	3b04      	subs	r3, #4
 800094c:	0112      	lsls	r2, r2, #4
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	440b      	add	r3, r1
 8000952:	761a      	strb	r2, [r3, #24]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	; 0x24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	f1c3 0307 	rsb	r3, r3, #7
 8000982:	2b04      	cmp	r3, #4
 8000984:	bf28      	it	cs
 8000986:	2304      	movcs	r3, #4
 8000988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3304      	adds	r3, #4
 800098e:	2b06      	cmp	r3, #6
 8000990:	d902      	bls.n	8000998 <NVIC_EncodePriority+0x30>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3b03      	subs	r3, #3
 8000996:	e000      	b.n	800099a <NVIC_EncodePriority+0x32>
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	f04f 32ff 	mov.w	r2, #4294967295
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43da      	mvns	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	401a      	ands	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b0:	f04f 31ff 	mov.w	r1, #4294967295
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43d9      	mvns	r1, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	4313      	orrs	r3, r2
         );
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3724      	adds	r7, #36	; 0x24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
	...

080009d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	3b01      	subs	r3, #1
 80009dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009e0:	d301      	bcc.n	80009e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009e2:	2301      	movs	r3, #1
 80009e4:	e00f      	b.n	8000a06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <SysTick_Config+0x40>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ee:	210f      	movs	r1, #15
 80009f0:	f04f 30ff 	mov.w	r0, #4294967295
 80009f4:	f7ff ff8e 	bl	8000914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <SysTick_Config+0x40>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fe:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <SysTick_Config+0x40>)
 8000a00:	2207      	movs	r2, #7
 8000a02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	e000e010 	.word	0xe000e010

08000a14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ff47 	bl	80008b0 <__NVIC_SetPriorityGrouping>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b086      	sub	sp, #24
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a3c:	f7ff ff5c 	bl	80008f8 <__NVIC_GetPriorityGrouping>
 8000a40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	68b9      	ldr	r1, [r7, #8]
 8000a46:	6978      	ldr	r0, [r7, #20]
 8000a48:	f7ff ff8e 	bl	8000968 <NVIC_EncodePriority>
 8000a4c:	4602      	mov	r2, r0
 8000a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a52:	4611      	mov	r1, r2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f7ff ff5d 	bl	8000914 <__NVIC_SetPriority>
}
 8000a5a:	bf00      	nop
 8000a5c:	3718      	adds	r7, #24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	b082      	sub	sp, #8
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ffb0 	bl	80009d0 <SysTick_Config>
 8000a70:	4603      	mov	r3, r0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	; 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
 8000a96:	e177      	b.n	8000d88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a98:	2201      	movs	r2, #1
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	f040 8166 	bne.w	8000d82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 0303 	and.w	r3, r3, #3
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d005      	beq.n	8000ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d130      	bne.n	8000b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	68da      	ldr	r2, [r3, #12]
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b04:	2201      	movs	r2, #1
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4013      	ands	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	091b      	lsrs	r3, r3, #4
 8000b1a:	f003 0201 	and.w	r2, r3, #1
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d017      	beq.n	8000b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	2203      	movs	r2, #3
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	4013      	ands	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d123      	bne.n	8000bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	08da      	lsrs	r2, r3, #3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3208      	adds	r2, #8
 8000b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	220f      	movs	r2, #15
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	691a      	ldr	r2, [r3, #16]
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	08da      	lsrs	r2, r3, #3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3208      	adds	r2, #8
 8000bba:	69b9      	ldr	r1, [r7, #24]
 8000bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0203 	and.w	r2, r3, #3
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f000 80c0 	beq.w	8000d82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b66      	ldr	r3, [pc, #408]	; (8000da0 <HAL_GPIO_Init+0x324>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a65      	ldr	r2, [pc, #404]	; (8000da0 <HAL_GPIO_Init+0x324>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b63      	ldr	r3, [pc, #396]	; (8000da0 <HAL_GPIO_Init+0x324>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c1e:	4a61      	ldr	r2, [pc, #388]	; (8000da4 <HAL_GPIO_Init+0x328>)
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	3302      	adds	r3, #2
 8000c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	220f      	movs	r2, #15
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a58      	ldr	r2, [pc, #352]	; (8000da8 <HAL_GPIO_Init+0x32c>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d037      	beq.n	8000cba <HAL_GPIO_Init+0x23e>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a57      	ldr	r2, [pc, #348]	; (8000dac <HAL_GPIO_Init+0x330>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d031      	beq.n	8000cb6 <HAL_GPIO_Init+0x23a>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a56      	ldr	r2, [pc, #344]	; (8000db0 <HAL_GPIO_Init+0x334>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d02b      	beq.n	8000cb2 <HAL_GPIO_Init+0x236>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a55      	ldr	r2, [pc, #340]	; (8000db4 <HAL_GPIO_Init+0x338>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d025      	beq.n	8000cae <HAL_GPIO_Init+0x232>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a54      	ldr	r2, [pc, #336]	; (8000db8 <HAL_GPIO_Init+0x33c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d01f      	beq.n	8000caa <HAL_GPIO_Init+0x22e>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a53      	ldr	r2, [pc, #332]	; (8000dbc <HAL_GPIO_Init+0x340>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d019      	beq.n	8000ca6 <HAL_GPIO_Init+0x22a>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a52      	ldr	r2, [pc, #328]	; (8000dc0 <HAL_GPIO_Init+0x344>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d013      	beq.n	8000ca2 <HAL_GPIO_Init+0x226>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a51      	ldr	r2, [pc, #324]	; (8000dc4 <HAL_GPIO_Init+0x348>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d00d      	beq.n	8000c9e <HAL_GPIO_Init+0x222>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a50      	ldr	r2, [pc, #320]	; (8000dc8 <HAL_GPIO_Init+0x34c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d007      	beq.n	8000c9a <HAL_GPIO_Init+0x21e>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a4f      	ldr	r2, [pc, #316]	; (8000dcc <HAL_GPIO_Init+0x350>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d101      	bne.n	8000c96 <HAL_GPIO_Init+0x21a>
 8000c92:	2309      	movs	r3, #9
 8000c94:	e012      	b.n	8000cbc <HAL_GPIO_Init+0x240>
 8000c96:	230a      	movs	r3, #10
 8000c98:	e010      	b.n	8000cbc <HAL_GPIO_Init+0x240>
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	e00e      	b.n	8000cbc <HAL_GPIO_Init+0x240>
 8000c9e:	2307      	movs	r3, #7
 8000ca0:	e00c      	b.n	8000cbc <HAL_GPIO_Init+0x240>
 8000ca2:	2306      	movs	r3, #6
 8000ca4:	e00a      	b.n	8000cbc <HAL_GPIO_Init+0x240>
 8000ca6:	2305      	movs	r3, #5
 8000ca8:	e008      	b.n	8000cbc <HAL_GPIO_Init+0x240>
 8000caa:	2304      	movs	r3, #4
 8000cac:	e006      	b.n	8000cbc <HAL_GPIO_Init+0x240>
 8000cae:	2303      	movs	r3, #3
 8000cb0:	e004      	b.n	8000cbc <HAL_GPIO_Init+0x240>
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	e002      	b.n	8000cbc <HAL_GPIO_Init+0x240>
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e000      	b.n	8000cbc <HAL_GPIO_Init+0x240>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	69fa      	ldr	r2, [r7, #28]
 8000cbe:	f002 0203 	and.w	r2, r2, #3
 8000cc2:	0092      	lsls	r2, r2, #2
 8000cc4:	4093      	lsls	r3, r2
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ccc:	4935      	ldr	r1, [pc, #212]	; (8000da4 <HAL_GPIO_Init+0x328>)
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	089b      	lsrs	r3, r3, #2
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cda:	4b3d      	ldr	r3, [pc, #244]	; (8000dd0 <HAL_GPIO_Init+0x354>)
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cfe:	4a34      	ldr	r2, [pc, #208]	; (8000dd0 <HAL_GPIO_Init+0x354>)
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d04:	4b32      	ldr	r3, [pc, #200]	; (8000dd0 <HAL_GPIO_Init+0x354>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d003      	beq.n	8000d28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d28:	4a29      	ldr	r2, [pc, #164]	; (8000dd0 <HAL_GPIO_Init+0x354>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d2e:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <HAL_GPIO_Init+0x354>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d52:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <HAL_GPIO_Init+0x354>)
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_GPIO_Init+0x354>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4013      	ands	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d003      	beq.n	8000d7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <HAL_GPIO_Init+0x354>)
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3301      	adds	r3, #1
 8000d86:	61fb      	str	r3, [r7, #28]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	2b0f      	cmp	r3, #15
 8000d8c:	f67f ae84 	bls.w	8000a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40013800 	.word	0x40013800
 8000da8:	40020000 	.word	0x40020000
 8000dac:	40020400 	.word	0x40020400
 8000db0:	40020800 	.word	0x40020800
 8000db4:	40020c00 	.word	0x40020c00
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40021400 	.word	0x40021400
 8000dc0:	40021800 	.word	0x40021800
 8000dc4:	40021c00 	.word	0x40021c00
 8000dc8:	40022000 	.word	0x40022000
 8000dcc:	40022400 	.word	0x40022400
 8000dd0:	40013c00 	.word	0x40013c00

08000dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	807b      	strh	r3, [r7, #2]
 8000de0:	4613      	mov	r3, r2
 8000de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000de4:	787b      	ldrb	r3, [r7, #1]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dea:	887a      	ldrh	r2, [r7, #2]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000df0:	e003      	b.n	8000dfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000df2:	887b      	ldrh	r3, [r7, #2]
 8000df4:	041a      	lsls	r2, r3, #16
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	619a      	str	r2, [r3, #24]
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b085      	sub	sp, #20
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e18:	887a      	ldrh	r2, [r7, #2]
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	041a      	lsls	r2, r3, #16
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	400b      	ands	r3, r1
 8000e28:	431a      	orrs	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	619a      	str	r2, [r3, #24]
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e267      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d075      	beq.n	8000f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e5a:	4b88      	ldr	r3, [pc, #544]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	f003 030c 	and.w	r3, r3, #12
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d00c      	beq.n	8000e80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e66:	4b85      	ldr	r3, [pc, #532]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d112      	bne.n	8000e98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e72:	4b82      	ldr	r3, [pc, #520]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e7e:	d10b      	bne.n	8000e98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	4b7e      	ldr	r3, [pc, #504]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d05b      	beq.n	8000f44 <HAL_RCC_OscConfig+0x108>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d157      	bne.n	8000f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e242      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea0:	d106      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x74>
 8000ea2:	4b76      	ldr	r3, [pc, #472]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a75      	ldr	r2, [pc, #468]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e01d      	b.n	8000eec <HAL_RCC_OscConfig+0xb0>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x98>
 8000eba:	4b70      	ldr	r3, [pc, #448]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a6f      	ldr	r2, [pc, #444]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b6d      	ldr	r3, [pc, #436]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a6c      	ldr	r2, [pc, #432]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e00b      	b.n	8000eec <HAL_RCC_OscConfig+0xb0>
 8000ed4:	4b69      	ldr	r3, [pc, #420]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a68      	ldr	r2, [pc, #416]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b66      	ldr	r3, [pc, #408]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a65      	ldr	r2, [pc, #404]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d013      	beq.n	8000f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fcd0 	bl	8000898 <HAL_GetTick>
 8000ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efa:	e008      	b.n	8000f0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000efc:	f7ff fccc 	bl	8000898 <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	2b64      	cmp	r3, #100	; 0x64
 8000f08:	d901      	bls.n	8000f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e207      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f0e:	4b5b      	ldr	r3, [pc, #364]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d0f0      	beq.n	8000efc <HAL_RCC_OscConfig+0xc0>
 8000f1a:	e014      	b.n	8000f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fcbc 	bl	8000898 <HAL_GetTick>
 8000f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f22:	e008      	b.n	8000f36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f24:	f7ff fcb8 	bl	8000898 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b64      	cmp	r3, #100	; 0x64
 8000f30:	d901      	bls.n	8000f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000f32:	2303      	movs	r3, #3
 8000f34:	e1f3      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f36:	4b51      	ldr	r3, [pc, #324]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1f0      	bne.n	8000f24 <HAL_RCC_OscConfig+0xe8>
 8000f42:	e000      	b.n	8000f46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d063      	beq.n	800101a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f52:	4b4a      	ldr	r3, [pc, #296]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d00b      	beq.n	8000f76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f5e:	4b47      	ldr	r3, [pc, #284]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f66:	2b08      	cmp	r3, #8
 8000f68:	d11c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f6a:	4b44      	ldr	r3, [pc, #272]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d116      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f76:	4b41      	ldr	r3, [pc, #260]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d005      	beq.n	8000f8e <HAL_RCC_OscConfig+0x152>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d001      	beq.n	8000f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e1c7      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4937      	ldr	r1, [pc, #220]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fa2:	e03a      	b.n	800101a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d020      	beq.n	8000fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fac:	4b34      	ldr	r3, [pc, #208]	; (8001080 <HAL_RCC_OscConfig+0x244>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fc71 	bl	8000898 <HAL_GetTick>
 8000fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fb8:	e008      	b.n	8000fcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fba:	f7ff fc6d 	bl	8000898 <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	2b02      	cmp	r3, #2
 8000fc6:	d901      	bls.n	8000fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e1a8      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0302 	and.w	r3, r3, #2
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d0f0      	beq.n	8000fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd8:	4b28      	ldr	r3, [pc, #160]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	691b      	ldr	r3, [r3, #16]
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	4925      	ldr	r1, [pc, #148]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	600b      	str	r3, [r1, #0]
 8000fec:	e015      	b.n	800101a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <HAL_RCC_OscConfig+0x244>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fc50 	bl	8000898 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ffc:	f7ff fc4c 	bl	8000898 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e187      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f0      	bne.n	8000ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d036      	beq.n	8001094 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d016      	beq.n	800105c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <HAL_RCC_OscConfig+0x248>)
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001034:	f7ff fc30 	bl	8000898 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800103c:	f7ff fc2c 	bl	8000898 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e167      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800104e:	4b0b      	ldr	r3, [pc, #44]	; (800107c <HAL_RCC_OscConfig+0x240>)
 8001050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0x200>
 800105a:	e01b      	b.n	8001094 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800105c:	4b09      	ldr	r3, [pc, #36]	; (8001084 <HAL_RCC_OscConfig+0x248>)
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001062:	f7ff fc19 	bl	8000898 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001068:	e00e      	b.n	8001088 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800106a:	f7ff fc15 	bl	8000898 <HAL_GetTick>
 800106e:	4602      	mov	r2, r0
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b02      	cmp	r3, #2
 8001076:	d907      	bls.n	8001088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e150      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
 800107c:	40023800 	.word	0x40023800
 8001080:	42470000 	.word	0x42470000
 8001084:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001088:	4b88      	ldr	r3, [pc, #544]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 800108a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1ea      	bne.n	800106a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 8097 	beq.w	80011d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010a2:	2300      	movs	r3, #0
 80010a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a6:	4b81      	ldr	r3, [pc, #516]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10f      	bne.n	80010d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	4b7d      	ldr	r3, [pc, #500]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	4a7c      	ldr	r2, [pc, #496]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
 80010c2:	4b7a      	ldr	r3, [pc, #488]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ce:	2301      	movs	r3, #1
 80010d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d2:	4b77      	ldr	r3, [pc, #476]	; (80012b0 <HAL_RCC_OscConfig+0x474>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d118      	bne.n	8001110 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010de:	4b74      	ldr	r3, [pc, #464]	; (80012b0 <HAL_RCC_OscConfig+0x474>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a73      	ldr	r2, [pc, #460]	; (80012b0 <HAL_RCC_OscConfig+0x474>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010ea:	f7ff fbd5 	bl	8000898 <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010f2:	f7ff fbd1 	bl	8000898 <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e10c      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001104:	4b6a      	ldr	r3, [pc, #424]	; (80012b0 <HAL_RCC_OscConfig+0x474>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800110c:	2b00      	cmp	r3, #0
 800110e:	d0f0      	beq.n	80010f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d106      	bne.n	8001126 <HAL_RCC_OscConfig+0x2ea>
 8001118:	4b64      	ldr	r3, [pc, #400]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 800111a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800111c:	4a63      	ldr	r2, [pc, #396]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6713      	str	r3, [r2, #112]	; 0x70
 8001124:	e01c      	b.n	8001160 <HAL_RCC_OscConfig+0x324>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	2b05      	cmp	r3, #5
 800112c:	d10c      	bne.n	8001148 <HAL_RCC_OscConfig+0x30c>
 800112e:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 8001130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001132:	4a5e      	ldr	r2, [pc, #376]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	6713      	str	r3, [r2, #112]	; 0x70
 800113a:	4b5c      	ldr	r3, [pc, #368]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 800113c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800113e:	4a5b      	ldr	r2, [pc, #364]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 8001140:	f043 0301 	orr.w	r3, r3, #1
 8001144:	6713      	str	r3, [r2, #112]	; 0x70
 8001146:	e00b      	b.n	8001160 <HAL_RCC_OscConfig+0x324>
 8001148:	4b58      	ldr	r3, [pc, #352]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 800114a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800114c:	4a57      	ldr	r2, [pc, #348]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 800114e:	f023 0301 	bic.w	r3, r3, #1
 8001152:	6713      	str	r3, [r2, #112]	; 0x70
 8001154:	4b55      	ldr	r3, [pc, #340]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 8001156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001158:	4a54      	ldr	r2, [pc, #336]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 800115a:	f023 0304 	bic.w	r3, r3, #4
 800115e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d015      	beq.n	8001194 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001168:	f7ff fb96 	bl	8000898 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800116e:	e00a      	b.n	8001186 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001170:	f7ff fb92 	bl	8000898 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	f241 3288 	movw	r2, #5000	; 0x1388
 800117e:	4293      	cmp	r3, r2
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e0cb      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001186:	4b49      	ldr	r3, [pc, #292]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 8001188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d0ee      	beq.n	8001170 <HAL_RCC_OscConfig+0x334>
 8001192:	e014      	b.n	80011be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001194:	f7ff fb80 	bl	8000898 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119a:	e00a      	b.n	80011b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800119c:	f7ff fb7c 	bl	8000898 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e0b5      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b2:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 80011b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1ee      	bne.n	800119c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80011be:	7dfb      	ldrb	r3, [r7, #23]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d105      	bne.n	80011d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011c4:	4b39      	ldr	r3, [pc, #228]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	4a38      	ldr	r2, [pc, #224]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 80011ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80a1 	beq.w	800131c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011da:	4b34      	ldr	r3, [pc, #208]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b08      	cmp	r3, #8
 80011e4:	d05c      	beq.n	80012a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d141      	bne.n	8001272 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ee:	4b31      	ldr	r3, [pc, #196]	; (80012b4 <HAL_RCC_OscConfig+0x478>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f4:	f7ff fb50 	bl	8000898 <HAL_GetTick>
 80011f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011fa:	e008      	b.n	800120e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011fc:	f7ff fb4c 	bl	8000898 <HAL_GetTick>
 8001200:	4602      	mov	r2, r0
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	1ad3      	subs	r3, r2, r3
 8001206:	2b02      	cmp	r3, #2
 8001208:	d901      	bls.n	800120e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800120a:	2303      	movs	r3, #3
 800120c:	e087      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800120e:	4b27      	ldr	r3, [pc, #156]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f0      	bne.n	80011fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69da      	ldr	r2, [r3, #28]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001228:	019b      	lsls	r3, r3, #6
 800122a:	431a      	orrs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	085b      	lsrs	r3, r3, #1
 8001232:	3b01      	subs	r3, #1
 8001234:	041b      	lsls	r3, r3, #16
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	061b      	lsls	r3, r3, #24
 800123e:	491b      	ldr	r1, [pc, #108]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_RCC_OscConfig+0x478>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff fb25 	bl	8000898 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001252:	f7ff fb21 	bl	8000898 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e05c      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x416>
 8001270:	e054      	b.n	800131c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <HAL_RCC_OscConfig+0x478>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fb0e 	bl	8000898 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001280:	f7ff fb0a 	bl	8000898 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e045      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_RCC_OscConfig+0x470>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x444>
 800129e:	e03d      	b.n	800131c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d107      	bne.n	80012b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e038      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000
 80012b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <HAL_RCC_OscConfig+0x4ec>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d028      	beq.n	8001318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d121      	bne.n	8001318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012de:	429a      	cmp	r2, r3
 80012e0:	d11a      	bne.n	8001318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80012e8:	4013      	ands	r3, r2
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d111      	bne.n	8001318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012fe:	085b      	lsrs	r3, r3, #1
 8001300:	3b01      	subs	r3, #1
 8001302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001304:	429a      	cmp	r2, r3
 8001306:	d107      	bne.n	8001318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d101      	bne.n	8001340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e0cc      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001340:	4b68      	ldr	r3, [pc, #416]	; (80014e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 030f 	and.w	r3, r3, #15
 8001348:	683a      	ldr	r2, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	d90c      	bls.n	8001368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134e:	4b65      	ldr	r3, [pc, #404]	; (80014e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001356:	4b63      	ldr	r3, [pc, #396]	; (80014e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d001      	beq.n	8001368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e0b8      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d020      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001380:	4b59      	ldr	r3, [pc, #356]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	4a58      	ldr	r2, [pc, #352]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001386:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800138a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001398:	4b53      	ldr	r3, [pc, #332]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	4a52      	ldr	r2, [pc, #328]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 800139e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80013a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a4:	4b50      	ldr	r3, [pc, #320]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	494d      	ldr	r1, [pc, #308]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d044      	beq.n	800144c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d107      	bne.n	80013da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ca:	4b47      	ldr	r3, [pc, #284]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d119      	bne.n	800140a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e07f      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d003      	beq.n	80013ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d107      	bne.n	80013fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d109      	bne.n	800140a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e06f      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e067      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800140a:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f023 0203 	bic.w	r2, r3, #3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4934      	ldr	r1, [pc, #208]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001418:	4313      	orrs	r3, r2
 800141a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800141c:	f7ff fa3c 	bl	8000898 <HAL_GetTick>
 8001420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001422:	e00a      	b.n	800143a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001424:	f7ff fa38 	bl	8000898 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e04f      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143a:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f003 020c 	and.w	r2, r3, #12
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	429a      	cmp	r2, r3
 800144a:	d1eb      	bne.n	8001424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800144c:	4b25      	ldr	r3, [pc, #148]	; (80014e4 <HAL_RCC_ClockConfig+0x1b8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 030f 	and.w	r3, r3, #15
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	429a      	cmp	r2, r3
 8001458:	d20c      	bcs.n	8001474 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145a:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <HAL_RCC_ClockConfig+0x1b8>)
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 030f 	and.w	r3, r3, #15
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	429a      	cmp	r2, r3
 800146e:	d001      	beq.n	8001474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e032      	b.n	80014da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d008      	beq.n	8001492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	4916      	ldr	r1, [pc, #88]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 800148e:	4313      	orrs	r3, r2
 8001490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	2b00      	cmp	r3, #0
 800149c:	d009      	beq.n	80014b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	490e      	ldr	r1, [pc, #56]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	4313      	orrs	r3, r2
 80014b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80014b2:	f000 f821 	bl	80014f8 <HAL_RCC_GetSysClockFreq>
 80014b6:	4602      	mov	r2, r0
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	490a      	ldr	r1, [pc, #40]	; (80014ec <HAL_RCC_ClockConfig+0x1c0>)
 80014c4:	5ccb      	ldrb	r3, [r1, r3]
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <HAL_RCC_ClockConfig+0x1c4>)
 80014cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_RCC_ClockConfig+0x1c8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f99c 	bl	8000810 <HAL_InitTick>

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023c00 	.word	0x40023c00
 80014e8:	40023800 	.word	0x40023800
 80014ec:	08004260 	.word	0x08004260
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000004 	.word	0x20000004

080014f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014fc:	b090      	sub	sp, #64	; 0x40
 80014fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001508:	2300      	movs	r3, #0
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001510:	4b59      	ldr	r3, [pc, #356]	; (8001678 <HAL_RCC_GetSysClockFreq+0x180>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b08      	cmp	r3, #8
 800151a:	d00d      	beq.n	8001538 <HAL_RCC_GetSysClockFreq+0x40>
 800151c:	2b08      	cmp	r3, #8
 800151e:	f200 80a1 	bhi.w	8001664 <HAL_RCC_GetSysClockFreq+0x16c>
 8001522:	2b00      	cmp	r3, #0
 8001524:	d002      	beq.n	800152c <HAL_RCC_GetSysClockFreq+0x34>
 8001526:	2b04      	cmp	r3, #4
 8001528:	d003      	beq.n	8001532 <HAL_RCC_GetSysClockFreq+0x3a>
 800152a:	e09b      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800152c:	4b53      	ldr	r3, [pc, #332]	; (800167c <HAL_RCC_GetSysClockFreq+0x184>)
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001530:	e09b      	b.n	800166a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001532:	4b53      	ldr	r3, [pc, #332]	; (8001680 <HAL_RCC_GetSysClockFreq+0x188>)
 8001534:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001536:	e098      	b.n	800166a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001538:	4b4f      	ldr	r3, [pc, #316]	; (8001678 <HAL_RCC_GetSysClockFreq+0x180>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001540:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001542:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <HAL_RCC_GetSysClockFreq+0x180>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d028      	beq.n	80015a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154e:	4b4a      	ldr	r3, [pc, #296]	; (8001678 <HAL_RCC_GetSysClockFreq+0x180>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	099b      	lsrs	r3, r3, #6
 8001554:	2200      	movs	r2, #0
 8001556:	623b      	str	r3, [r7, #32]
 8001558:	627a      	str	r2, [r7, #36]	; 0x24
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001560:	2100      	movs	r1, #0
 8001562:	4b47      	ldr	r3, [pc, #284]	; (8001680 <HAL_RCC_GetSysClockFreq+0x188>)
 8001564:	fb03 f201 	mul.w	r2, r3, r1
 8001568:	2300      	movs	r3, #0
 800156a:	fb00 f303 	mul.w	r3, r0, r3
 800156e:	4413      	add	r3, r2
 8001570:	4a43      	ldr	r2, [pc, #268]	; (8001680 <HAL_RCC_GetSysClockFreq+0x188>)
 8001572:	fba0 1202 	umull	r1, r2, r0, r2
 8001576:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001578:	460a      	mov	r2, r1
 800157a:	62ba      	str	r2, [r7, #40]	; 0x28
 800157c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800157e:	4413      	add	r3, r2
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001584:	2200      	movs	r2, #0
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	61fa      	str	r2, [r7, #28]
 800158a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800158e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001592:	f7fe fe2d 	bl	80001f0 <__aeabi_uldivmod>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4613      	mov	r3, r2
 800159c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800159e:	e053      	b.n	8001648 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a0:	4b35      	ldr	r3, [pc, #212]	; (8001678 <HAL_RCC_GetSysClockFreq+0x180>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	099b      	lsrs	r3, r3, #6
 80015a6:	2200      	movs	r2, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	617a      	str	r2, [r7, #20]
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80015b2:	f04f 0b00 	mov.w	fp, #0
 80015b6:	4652      	mov	r2, sl
 80015b8:	465b      	mov	r3, fp
 80015ba:	f04f 0000 	mov.w	r0, #0
 80015be:	f04f 0100 	mov.w	r1, #0
 80015c2:	0159      	lsls	r1, r3, #5
 80015c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015c8:	0150      	lsls	r0, r2, #5
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	ebb2 080a 	subs.w	r8, r2, sl
 80015d2:	eb63 090b 	sbc.w	r9, r3, fp
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80015e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80015e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80015ea:	ebb2 0408 	subs.w	r4, r2, r8
 80015ee:	eb63 0509 	sbc.w	r5, r3, r9
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	f04f 0300 	mov.w	r3, #0
 80015fa:	00eb      	lsls	r3, r5, #3
 80015fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001600:	00e2      	lsls	r2, r4, #3
 8001602:	4614      	mov	r4, r2
 8001604:	461d      	mov	r5, r3
 8001606:	eb14 030a 	adds.w	r3, r4, sl
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	eb45 030b 	adc.w	r3, r5, fp
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f04f 0300 	mov.w	r3, #0
 800161a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800161e:	4629      	mov	r1, r5
 8001620:	028b      	lsls	r3, r1, #10
 8001622:	4621      	mov	r1, r4
 8001624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001628:	4621      	mov	r1, r4
 800162a:	028a      	lsls	r2, r1, #10
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001632:	2200      	movs	r2, #0
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	60fa      	str	r2, [r7, #12]
 8001638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800163c:	f7fe fdd8 	bl	80001f0 <__aeabi_uldivmod>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4613      	mov	r3, r2
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001648:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_RCC_GetSysClockFreq+0x180>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	0c1b      	lsrs	r3, r3, #16
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	3301      	adds	r3, #1
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800165a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800165c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001662:	e002      	b.n	800166a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_RCC_GetSysClockFreq+0x184>)
 8001666:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800166a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800166c:	4618      	mov	r0, r3
 800166e:	3740      	adds	r7, #64	; 0x40
 8001670:	46bd      	mov	sp, r7
 8001672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	00f42400 	.word	0x00f42400
 8001680:	017d7840 	.word	0x017d7840

08001684 <__NVIC_SetPriority>:
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80016dc:	2100      	movs	r1, #0
 80016de:	f06f 0004 	mvn.w	r0, #4
 80016e2:	f7ff ffcf 	bl	8001684 <__NVIC_SetPriority>
#endif
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016f2:	f3ef 8305 	mrs	r3, IPSR
 80016f6:	603b      	str	r3, [r7, #0]
  return(result);
 80016f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80016fe:	f06f 0305 	mvn.w	r3, #5
 8001702:	607b      	str	r3, [r7, #4]
 8001704:	e00c      	b.n	8001720 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <osKernelInitialize+0x44>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d105      	bne.n	800171a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <osKernelInitialize+0x44>)
 8001710:	2201      	movs	r2, #1
 8001712:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001714:	2300      	movs	r3, #0
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	e002      	b.n	8001720 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800171a:	f04f 33ff 	mov.w	r3, #4294967295
 800171e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000034 	.word	0x20000034

08001734 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800173a:	f3ef 8305 	mrs	r3, IPSR
 800173e:	603b      	str	r3, [r7, #0]
  return(result);
 8001740:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001746:	f06f 0305 	mvn.w	r3, #5
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	e010      	b.n	8001770 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <osKernelStart+0x48>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d109      	bne.n	800176a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001756:	f7ff ffbf 	bl	80016d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <osKernelStart+0x48>)
 800175c:	2202      	movs	r2, #2
 800175e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001760:	f001 f866 	bl	8002830 <vTaskStartScheduler>
      stat = osOK;
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	e002      	b.n	8001770 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000034 	.word	0x20000034

08001780 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b08e      	sub	sp, #56	; 0x38
 8001784:	af04      	add	r7, sp, #16
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001790:	f3ef 8305 	mrs	r3, IPSR
 8001794:	617b      	str	r3, [r7, #20]
  return(result);
 8001796:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001798:	2b00      	cmp	r3, #0
 800179a:	d17e      	bne.n	800189a <osThreadNew+0x11a>
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d07b      	beq.n	800189a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80017a6:	2318      	movs	r3, #24
 80017a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d045      	beq.n	8001846 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d002      	beq.n	80017c8 <osThreadNew+0x48>
        name = attr->name;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d002      	beq.n	80017d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d008      	beq.n	80017ee <osThreadNew+0x6e>
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b38      	cmp	r3, #56	; 0x38
 80017e0:	d805      	bhi.n	80017ee <osThreadNew+0x6e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <osThreadNew+0x72>
        return (NULL);
 80017ee:	2300      	movs	r3, #0
 80017f0:	e054      	b.n	800189c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00e      	beq.n	8001828 <osThreadNew+0xa8>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	2b5b      	cmp	r3, #91	; 0x5b
 8001810:	d90a      	bls.n	8001828 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <osThreadNew+0xa8>
        mem = 1;
 8001822:	2301      	movs	r3, #1
 8001824:	61bb      	str	r3, [r7, #24]
 8001826:	e010      	b.n	800184a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10c      	bne.n	800184a <osThreadNew+0xca>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d108      	bne.n	800184a <osThreadNew+0xca>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d104      	bne.n	800184a <osThreadNew+0xca>
          mem = 0;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
 8001844:	e001      	b.n	800184a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d110      	bne.n	8001872 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001858:	9202      	str	r2, [sp, #8]
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	9300      	str	r3, [sp, #0]
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	6a3a      	ldr	r2, [r7, #32]
 8001864:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fe0c 	bl	8002484 <xTaskCreateStatic>
 800186c:	4603      	mov	r3, r0
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	e013      	b.n	800189a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d110      	bne.n	800189a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	b29a      	uxth	r2, r3
 800187c:	f107 0310 	add.w	r3, r7, #16
 8001880:	9301      	str	r3, [sp, #4]
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 fe57 	bl	800253e <xTaskCreate>
 8001890:	4603      	mov	r3, r0
 8001892:	2b01      	cmp	r3, #1
 8001894:	d001      	beq.n	800189a <osThreadNew+0x11a>
            hTask = NULL;
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800189a:	693b      	ldr	r3, [r7, #16]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3728      	adds	r7, #40	; 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018ac:	f3ef 8305 	mrs	r3, IPSR
 80018b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80018b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <osDelay+0x1c>
    stat = osErrorISR;
 80018b8:	f06f 0305 	mvn.w	r3, #5
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	e007      	b.n	80018d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 ff7c 	bl	80027c8 <vTaskDelay>
    }
  }

  return (stat);
 80018d0:	68fb      	ldr	r3, [r7, #12]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80018dc:	b480      	push	{r7}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4a07      	ldr	r2, [pc, #28]	; (8001908 <vApplicationGetIdleTaskMemory+0x2c>)
 80018ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	4a06      	ldr	r2, [pc, #24]	; (800190c <vApplicationGetIdleTaskMemory+0x30>)
 80018f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2280      	movs	r2, #128	; 0x80
 80018f8:	601a      	str	r2, [r3, #0]
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000038 	.word	0x20000038
 800190c:	20000094 	.word	0x20000094

08001910 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4a07      	ldr	r2, [pc, #28]	; (800193c <vApplicationGetTimerTaskMemory+0x2c>)
 8001920:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	4a06      	ldr	r2, [pc, #24]	; (8001940 <vApplicationGetTimerTaskMemory+0x30>)
 8001926:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800192e:	601a      	str	r2, [r3, #0]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	20000294 	.word	0x20000294
 8001940:	200002f0 	.word	0x200002f0

08001944 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f103 0208 	add.w	r2, r3, #8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f103 0208 	add.w	r2, r3, #8
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f103 0208 	add.w	r2, r3, #8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800199e:	b480      	push	{r7}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	601a      	str	r2, [r3, #0]
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80019e6:	b480      	push	{r7}
 80019e8:	b085      	sub	sp, #20
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d103      	bne.n	8001a06 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	e00c      	b.n	8001a20 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	3308      	adds	r3, #8
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	e002      	b.n	8001a14 <vListInsert+0x2e>
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d2f6      	bcs.n	8001a0e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	601a      	str	r2, [r3, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6892      	ldr	r2, [r2, #8]
 8001a6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6852      	ldr	r2, [r2, #4]
 8001a78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d103      	bne.n	8001a8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	1e5a      	subs	r2, r3, #1
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d10a      	bne.n	8001ad6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac4:	f383 8811 	msr	BASEPRI, r3
 8001ac8:	f3bf 8f6f 	isb	sy
 8001acc:	f3bf 8f4f 	dsb	sy
 8001ad0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001ad2:	bf00      	nop
 8001ad4:	e7fe      	b.n	8001ad4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001ad6:	f002 f84d 	bl	8003b74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae2:	68f9      	ldr	r1, [r7, #12]
 8001ae4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ae6:	fb01 f303 	mul.w	r3, r1, r3
 8001aea:	441a      	add	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b06:	3b01      	subs	r3, #1
 8001b08:	68f9      	ldr	r1, [r7, #12]
 8001b0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001b0c:	fb01 f303 	mul.w	r3, r1, r3
 8001b10:	441a      	add	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	22ff      	movs	r2, #255	; 0xff
 8001b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	22ff      	movs	r2, #255	; 0xff
 8001b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d114      	bne.n	8001b56 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01a      	beq.n	8001b6a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3310      	adds	r3, #16
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f001 f903 	bl	8002d44 <xTaskRemoveFromEventList>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d012      	beq.n	8001b6a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <xQueueGenericReset+0xcc>)
 8001b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	f3bf 8f4f 	dsb	sy
 8001b50:	f3bf 8f6f 	isb	sy
 8001b54:	e009      	b.n	8001b6a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	3310      	adds	r3, #16
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fef2 	bl	8001944 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3324      	adds	r3, #36	; 0x24
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff feed 	bl	8001944 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001b6a:	f002 f833 	bl	8003bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	e000ed04 	.word	0xe000ed04

08001b7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08e      	sub	sp, #56	; 0x38
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
 8001b88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10a      	bne.n	8001ba6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b94:	f383 8811 	msr	BASEPRI, r3
 8001b98:	f3bf 8f6f 	isb	sy
 8001b9c:	f3bf 8f4f 	dsb	sy
 8001ba0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001ba2:	bf00      	nop
 8001ba4:	e7fe      	b.n	8001ba4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10a      	bne.n	8001bc2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb0:	f383 8811 	msr	BASEPRI, r3
 8001bb4:	f3bf 8f6f 	isb	sy
 8001bb8:	f3bf 8f4f 	dsb	sy
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001bbe:	bf00      	nop
 8001bc0:	e7fe      	b.n	8001bc0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <xQueueGenericCreateStatic+0x52>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <xQueueGenericCreateStatic+0x56>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <xQueueGenericCreateStatic+0x58>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d10a      	bne.n	8001bee <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bdc:	f383 8811 	msr	BASEPRI, r3
 8001be0:	f3bf 8f6f 	isb	sy
 8001be4:	f3bf 8f4f 	dsb	sy
 8001be8:	623b      	str	r3, [r7, #32]
}
 8001bea:	bf00      	nop
 8001bec:	e7fe      	b.n	8001bec <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d102      	bne.n	8001bfa <xQueueGenericCreateStatic+0x7e>
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <xQueueGenericCreateStatic+0x82>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <xQueueGenericCreateStatic+0x84>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10a      	bne.n	8001c1a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c08:	f383 8811 	msr	BASEPRI, r3
 8001c0c:	f3bf 8f6f 	isb	sy
 8001c10:	f3bf 8f4f 	dsb	sy
 8001c14:	61fb      	str	r3, [r7, #28]
}
 8001c16:	bf00      	nop
 8001c18:	e7fe      	b.n	8001c18 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001c1a:	2350      	movs	r3, #80	; 0x50
 8001c1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	2b50      	cmp	r3, #80	; 0x50
 8001c22:	d00a      	beq.n	8001c3a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c28:	f383 8811 	msr	BASEPRI, r3
 8001c2c:	f3bf 8f6f 	isb	sy
 8001c30:	f3bf 8f4f 	dsb	sy
 8001c34:	61bb      	str	r3, [r7, #24]
}
 8001c36:	bf00      	nop
 8001c38:	e7fe      	b.n	8001c38 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001c3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00d      	beq.n	8001c62 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001c4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	4613      	mov	r3, r2
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	68b9      	ldr	r1, [r7, #8]
 8001c5c:	68f8      	ldr	r0, [r7, #12]
 8001c5e:	f000 f805 	bl	8001c6c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3730      	adds	r7, #48	; 0x30
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d103      	bne.n	8001c88 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e002      	b.n	8001c8e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	69b8      	ldr	r0, [r7, #24]
 8001c9e:	f7ff ff05 	bl	8001aac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08e      	sub	sp, #56	; 0x38
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10a      	bne.n	8001ce6 <xQueueGenericSend+0x32>
	__asm volatile
 8001cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cd4:	f383 8811 	msr	BASEPRI, r3
 8001cd8:	f3bf 8f6f 	isb	sy
 8001cdc:	f3bf 8f4f 	dsb	sy
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001ce2:	bf00      	nop
 8001ce4:	e7fe      	b.n	8001ce4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d103      	bne.n	8001cf4 <xQueueGenericSend+0x40>
 8001cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <xQueueGenericSend+0x44>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <xQueueGenericSend+0x46>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10a      	bne.n	8001d14 <xQueueGenericSend+0x60>
	__asm volatile
 8001cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d02:	f383 8811 	msr	BASEPRI, r3
 8001d06:	f3bf 8f6f 	isb	sy
 8001d0a:	f3bf 8f4f 	dsb	sy
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001d10:	bf00      	nop
 8001d12:	e7fe      	b.n	8001d12 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d103      	bne.n	8001d22 <xQueueGenericSend+0x6e>
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <xQueueGenericSend+0x72>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <xQueueGenericSend+0x74>
 8001d26:	2300      	movs	r3, #0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10a      	bne.n	8001d42 <xQueueGenericSend+0x8e>
	__asm volatile
 8001d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d30:	f383 8811 	msr	BASEPRI, r3
 8001d34:	f3bf 8f6f 	isb	sy
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	623b      	str	r3, [r7, #32]
}
 8001d3e:	bf00      	nop
 8001d40:	e7fe      	b.n	8001d40 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d42:	f001 f9bd 	bl	80030c0 <xTaskGetSchedulerState>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <xQueueGenericSend+0x9e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <xQueueGenericSend+0xa2>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <xQueueGenericSend+0xa4>
 8001d56:	2300      	movs	r3, #0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10a      	bne.n	8001d72 <xQueueGenericSend+0xbe>
	__asm volatile
 8001d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d60:	f383 8811 	msr	BASEPRI, r3
 8001d64:	f3bf 8f6f 	isb	sy
 8001d68:	f3bf 8f4f 	dsb	sy
 8001d6c:	61fb      	str	r3, [r7, #28]
}
 8001d6e:	bf00      	nop
 8001d70:	e7fe      	b.n	8001d70 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001d72:	f001 feff 	bl	8003b74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d302      	bcc.n	8001d88 <xQueueGenericSend+0xd4>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d129      	bne.n	8001ddc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d8e:	f000 fa0b 	bl	80021a8 <prvCopyDataToQueue>
 8001d92:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d010      	beq.n	8001dbe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d9e:	3324      	adds	r3, #36	; 0x24
 8001da0:	4618      	mov	r0, r3
 8001da2:	f000 ffcf 	bl	8002d44 <xTaskRemoveFromEventList>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d013      	beq.n	8001dd4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001dac:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <xQueueGenericSend+0x1f8>)
 8001dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	f3bf 8f6f 	isb	sy
 8001dbc:	e00a      	b.n	8001dd4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <xQueueGenericSend+0x1f8>)
 8001dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f3bf 8f4f 	dsb	sy
 8001dd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001dd4:	f001 fefe 	bl	8003bd4 <vPortExitCritical>
				return pdPASS;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e063      	b.n	8001ea4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d103      	bne.n	8001dea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001de2:	f001 fef7 	bl	8003bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e05c      	b.n	8001ea4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d106      	bne.n	8001dfe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 f809 	bl	8002e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001dfe:	f001 fee9 	bl	8003bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001e02:	f000 fd7b 	bl	80028fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001e06:	f001 feb5 	bl	8003b74 <vPortEnterCritical>
 8001e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e10:	b25b      	sxtb	r3, r3
 8001e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e16:	d103      	bne.n	8001e20 <xQueueGenericSend+0x16c>
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e22:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e26:	b25b      	sxtb	r3, r3
 8001e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e2c:	d103      	bne.n	8001e36 <xQueueGenericSend+0x182>
 8001e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e36:	f001 fecd 	bl	8003bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e3a:	1d3a      	adds	r2, r7, #4
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4611      	mov	r1, r2
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 fff8 	bl	8002e38 <xTaskCheckForTimeOut>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d124      	bne.n	8001e98 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e50:	f000 faa2 	bl	8002398 <prvIsQueueFull>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d018      	beq.n	8001e8c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e5c:	3310      	adds	r3, #16
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 ff1e 	bl	8002ca4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001e68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e6a:	f000 fa2d 	bl	80022c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001e6e:	f000 fd53 	bl	8002918 <xTaskResumeAll>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f47f af7c 	bne.w	8001d72 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <xQueueGenericSend+0x1f8>)
 8001e7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	f3bf 8f4f 	dsb	sy
 8001e86:	f3bf 8f6f 	isb	sy
 8001e8a:	e772      	b.n	8001d72 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001e8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e8e:	f000 fa1b 	bl	80022c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e92:	f000 fd41 	bl	8002918 <xTaskResumeAll>
 8001e96:	e76c      	b.n	8001d72 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e9a:	f000 fa15 	bl	80022c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e9e:	f000 fd3b 	bl	8002918 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001ea2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3738      	adds	r7, #56	; 0x38
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	e000ed04 	.word	0xe000ed04

08001eb0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b090      	sub	sp, #64	; 0x40
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8001ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ecc:	f383 8811 	msr	BASEPRI, r3
 8001ed0:	f3bf 8f6f 	isb	sy
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001eda:	bf00      	nop
 8001edc:	e7fe      	b.n	8001edc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <xQueueGenericSendFromISR+0x3c>
 8001ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <xQueueGenericSendFromISR+0x40>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <xQueueGenericSendFromISR+0x42>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10a      	bne.n	8001f0c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efa:	f383 8811 	msr	BASEPRI, r3
 8001efe:	f3bf 8f6f 	isb	sy
 8001f02:	f3bf 8f4f 	dsb	sy
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f08:	bf00      	nop
 8001f0a:	e7fe      	b.n	8001f0a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d103      	bne.n	8001f1a <xQueueGenericSendFromISR+0x6a>
 8001f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <xQueueGenericSendFromISR+0x6e>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <xQueueGenericSendFromISR+0x70>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10a      	bne.n	8001f3a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f28:	f383 8811 	msr	BASEPRI, r3
 8001f2c:	f3bf 8f6f 	isb	sy
 8001f30:	f3bf 8f4f 	dsb	sy
 8001f34:	623b      	str	r3, [r7, #32]
}
 8001f36:	bf00      	nop
 8001f38:	e7fe      	b.n	8001f38 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f3a:	f001 fefd 	bl	8003d38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001f3e:	f3ef 8211 	mrs	r2, BASEPRI
 8001f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f46:	f383 8811 	msr	BASEPRI, r3
 8001f4a:	f3bf 8f6f 	isb	sy
 8001f4e:	f3bf 8f4f 	dsb	sy
 8001f52:	61fa      	str	r2, [r7, #28]
 8001f54:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001f56:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d302      	bcc.n	8001f6c <xQueueGenericSendFromISR+0xbc>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d12f      	bne.n	8001fcc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f82:	f000 f911 	bl	80021a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001f86:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8e:	d112      	bne.n	8001fb6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d016      	beq.n	8001fc6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9a:	3324      	adds	r3, #36	; 0x24
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 fed1 	bl	8002d44 <xTaskRemoveFromEventList>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00e      	beq.n	8001fc6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00b      	beq.n	8001fc6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	e007      	b.n	8001fc6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001fb6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fba:	3301      	adds	r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	b25a      	sxtb	r2, r3
 8001fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8001fca:	e001      	b.n	8001fd0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001fda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3740      	adds	r7, #64	; 0x40
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08c      	sub	sp, #48	; 0x30
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8001ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10a      	bne.n	8002018 <xQueueReceive+0x30>
	__asm volatile
 8002002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002006:	f383 8811 	msr	BASEPRI, r3
 800200a:	f3bf 8f6f 	isb	sy
 800200e:	f3bf 8f4f 	dsb	sy
 8002012:	623b      	str	r3, [r7, #32]
}
 8002014:	bf00      	nop
 8002016:	e7fe      	b.n	8002016 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d103      	bne.n	8002026 <xQueueReceive+0x3e>
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <xQueueReceive+0x42>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <xQueueReceive+0x44>
 800202a:	2300      	movs	r3, #0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d10a      	bne.n	8002046 <xQueueReceive+0x5e>
	__asm volatile
 8002030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002034:	f383 8811 	msr	BASEPRI, r3
 8002038:	f3bf 8f6f 	isb	sy
 800203c:	f3bf 8f4f 	dsb	sy
 8002040:	61fb      	str	r3, [r7, #28]
}
 8002042:	bf00      	nop
 8002044:	e7fe      	b.n	8002044 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002046:	f001 f83b 	bl	80030c0 <xTaskGetSchedulerState>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <xQueueReceive+0x6e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <xQueueReceive+0x72>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <xQueueReceive+0x74>
 800205a:	2300      	movs	r3, #0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <xQueueReceive+0x8e>
	__asm volatile
 8002060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	61bb      	str	r3, [r7, #24]
}
 8002072:	bf00      	nop
 8002074:	e7fe      	b.n	8002074 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002076:	f001 fd7d 	bl	8003b74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800207e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01f      	beq.n	80020c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002086:	68b9      	ldr	r1, [r7, #8]
 8002088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800208a:	f000 f8f7 	bl	800227c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002090:	1e5a      	subs	r2, r3, #1
 8002092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002094:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00f      	beq.n	80020be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	3310      	adds	r3, #16
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fe4e 	bl	8002d44 <xTaskRemoveFromEventList>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80020ae:	4b3d      	ldr	r3, [pc, #244]	; (80021a4 <xQueueReceive+0x1bc>)
 80020b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f3bf 8f4f 	dsb	sy
 80020ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80020be:	f001 fd89 	bl	8003bd4 <vPortExitCritical>
				return pdPASS;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e069      	b.n	800219a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d103      	bne.n	80020d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80020cc:	f001 fd82 	bl	8003bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80020d0:	2300      	movs	r3, #0
 80020d2:	e062      	b.n	800219a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80020d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d106      	bne.n	80020e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fe94 	bl	8002e0c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80020e4:	2301      	movs	r3, #1
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80020e8:	f001 fd74 	bl	8003bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80020ec:	f000 fc06 	bl	80028fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020f0:	f001 fd40 	bl	8003b74 <vPortEnterCritical>
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020fa:	b25b      	sxtb	r3, r3
 80020fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002100:	d103      	bne.n	800210a <xQueueReceive+0x122>
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800210a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002110:	b25b      	sxtb	r3, r3
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002116:	d103      	bne.n	8002120 <xQueueReceive+0x138>
 8002118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002120:	f001 fd58 	bl	8003bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002124:	1d3a      	adds	r2, r7, #4
 8002126:	f107 0310 	add.w	r3, r7, #16
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fe83 	bl	8002e38 <xTaskCheckForTimeOut>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d123      	bne.n	8002180 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800213a:	f000 f917 	bl	800236c <prvIsQueueEmpty>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d017      	beq.n	8002174 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	3324      	adds	r3, #36	; 0x24
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f000 fda9 	bl	8002ca4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002154:	f000 f8b8 	bl	80022c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002158:	f000 fbde 	bl	8002918 <xTaskResumeAll>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d189      	bne.n	8002076 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <xQueueReceive+0x1bc>)
 8002164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f3bf 8f4f 	dsb	sy
 800216e:	f3bf 8f6f 	isb	sy
 8002172:	e780      	b.n	8002076 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002176:	f000 f8a7 	bl	80022c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800217a:	f000 fbcd 	bl	8002918 <xTaskResumeAll>
 800217e:	e77a      	b.n	8002076 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002182:	f000 f8a1 	bl	80022c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002186:	f000 fbc7 	bl	8002918 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800218a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800218c:	f000 f8ee 	bl	800236c <prvIsQueueEmpty>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	f43f af6f 	beq.w	8002076 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002198:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800219a:	4618      	mov	r0, r3
 800219c:	3730      	adds	r7, #48	; 0x30
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000ed04 	.word	0xe000ed04

080021a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10d      	bne.n	80021e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d14d      	bne.n	800226a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 ff92 	bl	80030fc <xTaskPriorityDisinherit>
 80021d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	e043      	b.n	800226a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d119      	bne.n	800221c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6858      	ldr	r0, [r3, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	461a      	mov	r2, r3
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	f001 ffee 	bl	80041d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	441a      	add	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	429a      	cmp	r2, r3
 8002210:	d32b      	bcc.n	800226a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	e026      	b.n	800226a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	68d8      	ldr	r0, [r3, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	461a      	mov	r2, r3
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	f001 ffd4 	bl	80041d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	425b      	negs	r3, r3
 8002236:	441a      	add	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	68da      	ldr	r2, [r3, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d207      	bcs.n	8002258 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	425b      	negs	r3, r3
 8002252:	441a      	add	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d105      	bne.n	800226a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	3b01      	subs	r3, #1
 8002268:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002272:	697b      	ldr	r3, [r7, #20]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	2b00      	cmp	r3, #0
 800228c:	d018      	beq.n	80022c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	441a      	add	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68da      	ldr	r2, [r3, #12]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d303      	bcc.n	80022b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68d9      	ldr	r1, [r3, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	461a      	mov	r2, r3
 80022ba:	6838      	ldr	r0, [r7, #0]
 80022bc:	f001 ff8a 	bl	80041d4 <memcpy>
	}
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80022d0:	f001 fc50 	bl	8003b74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80022dc:	e011      	b.n	8002302 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d012      	beq.n	800230c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3324      	adds	r3, #36	; 0x24
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fd2a 	bl	8002d44 <xTaskRemoveFromEventList>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80022f6:	f000 fe01 	bl	8002efc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002306:	2b00      	cmp	r3, #0
 8002308:	dce9      	bgt.n	80022de <prvUnlockQueue+0x16>
 800230a:	e000      	b.n	800230e <prvUnlockQueue+0x46>
					break;
 800230c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	22ff      	movs	r2, #255	; 0xff
 8002312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002316:	f001 fc5d 	bl	8003bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800231a:	f001 fc2b 	bl	8003b74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002324:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002326:	e011      	b.n	800234c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d012      	beq.n	8002356 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3310      	adds	r3, #16
 8002334:	4618      	mov	r0, r3
 8002336:	f000 fd05 	bl	8002d44 <xTaskRemoveFromEventList>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002340:	f000 fddc 	bl	8002efc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002344:	7bbb      	ldrb	r3, [r7, #14]
 8002346:	3b01      	subs	r3, #1
 8002348:	b2db      	uxtb	r3, r3
 800234a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800234c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002350:	2b00      	cmp	r3, #0
 8002352:	dce9      	bgt.n	8002328 <prvUnlockQueue+0x60>
 8002354:	e000      	b.n	8002358 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002356:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	22ff      	movs	r2, #255	; 0xff
 800235c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002360:	f001 fc38 	bl	8003bd4 <vPortExitCritical>
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002374:	f001 fbfe 	bl	8003b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002380:	2301      	movs	r3, #1
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	e001      	b.n	800238a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800238a:	f001 fc23 	bl	8003bd4 <vPortExitCritical>

	return xReturn;
 800238e:	68fb      	ldr	r3, [r7, #12]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80023a0:	f001 fbe8 	bl	8003b74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d102      	bne.n	80023b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80023b0:	2301      	movs	r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e001      	b.n	80023ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80023ba:	f001 fc0b 	bl	8003bd4 <vPortExitCritical>

	return xReturn;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e014      	b.n	8002402 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80023d8:	4a0f      	ldr	r2, [pc, #60]	; (8002418 <vQueueAddToRegistry+0x50>)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10b      	bne.n	80023fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80023e4:	490c      	ldr	r1, [pc, #48]	; (8002418 <vQueueAddToRegistry+0x50>)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <vQueueAddToRegistry+0x50>)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80023fa:	e006      	b.n	800240a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3301      	adds	r3, #1
 8002400:	60fb      	str	r3, [r7, #12]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b07      	cmp	r3, #7
 8002406:	d9e7      	bls.n	80023d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002408:	bf00      	nop
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	200006f0 	.word	0x200006f0

0800241c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800242c:	f001 fba2 	bl	8003b74 <vPortEnterCritical>
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002436:	b25b      	sxtb	r3, r3
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d103      	bne.n	8002446 <vQueueWaitForMessageRestricted+0x2a>
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800244c:	b25b      	sxtb	r3, r3
 800244e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002452:	d103      	bne.n	800245c <vQueueWaitForMessageRestricted+0x40>
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800245c:	f001 fbba 	bl	8003bd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002464:	2b00      	cmp	r3, #0
 8002466:	d106      	bne.n	8002476 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3324      	adds	r3, #36	; 0x24
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	4618      	mov	r0, r3
 8002472:	f000 fc3b 	bl	8002cec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002476:	6978      	ldr	r0, [r7, #20]
 8002478:	f7ff ff26 	bl	80022c8 <prvUnlockQueue>
	}
 800247c:	bf00      	nop
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08e      	sub	sp, #56	; 0x38
 8002488:	af04      	add	r7, sp, #16
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10a      	bne.n	80024ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	623b      	str	r3, [r7, #32]
}
 80024aa:	bf00      	nop
 80024ac:	e7fe      	b.n	80024ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80024ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <xTaskCreateStatic+0x46>
	__asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	61fb      	str	r3, [r7, #28]
}
 80024c6:	bf00      	nop
 80024c8:	e7fe      	b.n	80024c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80024ca:	235c      	movs	r3, #92	; 0x5c
 80024cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b5c      	cmp	r3, #92	; 0x5c
 80024d2:	d00a      	beq.n	80024ea <xTaskCreateStatic+0x66>
	__asm volatile
 80024d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d8:	f383 8811 	msr	BASEPRI, r3
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	f3bf 8f4f 	dsb	sy
 80024e4:	61bb      	str	r3, [r7, #24]
}
 80024e6:	bf00      	nop
 80024e8:	e7fe      	b.n	80024e8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80024ea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80024ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d01e      	beq.n	8002530 <xTaskCreateStatic+0xac>
 80024f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d01b      	beq.n	8002530 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80024f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002500:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002504:	2202      	movs	r2, #2
 8002506:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800250a:	2300      	movs	r3, #0
 800250c:	9303      	str	r3, [sp, #12]
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	9302      	str	r3, [sp, #8]
 8002512:	f107 0314 	add.w	r3, r7, #20
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f850 	bl	80025c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002528:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800252a:	f000 f8dd 	bl	80026e8 <prvAddNewTaskToReadyList>
 800252e:	e001      	b.n	8002534 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002534:	697b      	ldr	r3, [r7, #20]
	}
 8002536:	4618      	mov	r0, r3
 8002538:	3728      	adds	r7, #40	; 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800253e:	b580      	push	{r7, lr}
 8002540:	b08c      	sub	sp, #48	; 0x30
 8002542:	af04      	add	r7, sp, #16
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	4613      	mov	r3, r2
 800254c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4618      	mov	r0, r3
 8002554:	f001 fc30 	bl	8003db8 <pvPortMalloc>
 8002558:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00e      	beq.n	800257e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002560:	205c      	movs	r0, #92	; 0x5c
 8002562:	f001 fc29 	bl	8003db8 <pvPortMalloc>
 8002566:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	631a      	str	r2, [r3, #48]	; 0x30
 8002574:	e005      	b.n	8002582 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002576:	6978      	ldr	r0, [r7, #20]
 8002578:	f001 fcea 	bl	8003f50 <vPortFree>
 800257c:	e001      	b.n	8002582 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d017      	beq.n	80025b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002590:	88fa      	ldrh	r2, [r7, #6]
 8002592:	2300      	movs	r3, #0
 8002594:	9303      	str	r3, [sp, #12]
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	9302      	str	r3, [sp, #8]
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68b9      	ldr	r1, [r7, #8]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f80e 	bl	80025c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80025ac:	69f8      	ldr	r0, [r7, #28]
 80025ae:	f000 f89b 	bl	80026e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61bb      	str	r3, [r7, #24]
 80025b6:	e002      	b.n	80025be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025b8:	f04f 33ff 	mov.w	r3, #4294967295
 80025bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80025be:	69bb      	ldr	r3, [r7, #24]
	}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3720      	adds	r7, #32
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80025d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	461a      	mov	r2, r3
 80025e0:	21a5      	movs	r1, #165	; 0xa5
 80025e2:	f001 fe05 	bl	80041f0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025f0:	3b01      	subs	r3, #1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f023 0307 	bic.w	r3, r3, #7
 80025fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <prvInitialiseNewTask+0x58>
	__asm volatile
 800260a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260e:	f383 8811 	msr	BASEPRI, r3
 8002612:	f3bf 8f6f 	isb	sy
 8002616:	f3bf 8f4f 	dsb	sy
 800261a:	617b      	str	r3, [r7, #20]
}
 800261c:	bf00      	nop
 800261e:	e7fe      	b.n	800261e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01f      	beq.n	8002666 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e012      	b.n	8002652 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	7819      	ldrb	r1, [r3, #0]
 8002634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	4413      	add	r3, r2
 800263a:	3334      	adds	r3, #52	; 0x34
 800263c:	460a      	mov	r2, r1
 800263e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	4413      	add	r3, r2
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d006      	beq.n	800265a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3301      	adds	r3, #1
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	2b0f      	cmp	r3, #15
 8002656:	d9e9      	bls.n	800262c <prvInitialiseNewTask+0x64>
 8002658:	e000      	b.n	800265c <prvInitialiseNewTask+0x94>
			{
				break;
 800265a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800265c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002664:	e003      	b.n	800266e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800266e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002670:	2b37      	cmp	r3, #55	; 0x37
 8002672:	d901      	bls.n	8002678 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002674:	2337      	movs	r3, #55	; 0x37
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002682:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002686:	2200      	movs	r2, #0
 8002688:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	3304      	adds	r3, #4
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff f978 	bl	8001984 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002696:	3318      	adds	r3, #24
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff f973 	bl	8001984 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80026aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	2200      	movs	r2, #0
 80026b8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80026ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	68f9      	ldr	r1, [r7, #12]
 80026c6:	69b8      	ldr	r0, [r7, #24]
 80026c8:	f001 f928 	bl	800391c <pxPortInitialiseStack>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80026d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d002      	beq.n	80026de <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80026de:	bf00      	nop
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80026f0:	f001 fa40 	bl	8003b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80026f4:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <prvAddNewTaskToReadyList+0xc4>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	3301      	adds	r3, #1
 80026fa:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <prvAddNewTaskToReadyList+0xc4>)
 80026fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80026fe:	4b2c      	ldr	r3, [pc, #176]	; (80027b0 <prvAddNewTaskToReadyList+0xc8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d109      	bne.n	800271a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002706:	4a2a      	ldr	r2, [pc, #168]	; (80027b0 <prvAddNewTaskToReadyList+0xc8>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <prvAddNewTaskToReadyList+0xc4>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d110      	bne.n	8002736 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002714:	f000 fc16 	bl	8002f44 <prvInitialiseTaskLists>
 8002718:	e00d      	b.n	8002736 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800271a:	4b26      	ldr	r3, [pc, #152]	; (80027b4 <prvAddNewTaskToReadyList+0xcc>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002722:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <prvAddNewTaskToReadyList+0xc8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	429a      	cmp	r2, r3
 800272e:	d802      	bhi.n	8002736 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002730:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <prvAddNewTaskToReadyList+0xc8>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002736:	4b20      	ldr	r3, [pc, #128]	; (80027b8 <prvAddNewTaskToReadyList+0xd0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3301      	adds	r3, #1
 800273c:	4a1e      	ldr	r2, [pc, #120]	; (80027b8 <prvAddNewTaskToReadyList+0xd0>)
 800273e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <prvAddNewTaskToReadyList+0xd0>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274c:	4b1b      	ldr	r3, [pc, #108]	; (80027bc <prvAddNewTaskToReadyList+0xd4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d903      	bls.n	800275c <prvAddNewTaskToReadyList+0x74>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	4a18      	ldr	r2, [pc, #96]	; (80027bc <prvAddNewTaskToReadyList+0xd4>)
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <prvAddNewTaskToReadyList+0xd8>)
 800276a:	441a      	add	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3304      	adds	r3, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4610      	mov	r0, r2
 8002774:	f7ff f913 	bl	800199e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002778:	f001 fa2c 	bl	8003bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800277c:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <prvAddNewTaskToReadyList+0xcc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00e      	beq.n	80027a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002784:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <prvAddNewTaskToReadyList+0xc8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	429a      	cmp	r2, r3
 8002790:	d207      	bcs.n	80027a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <prvAddNewTaskToReadyList+0xdc>)
 8002794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000c04 	.word	0x20000c04
 80027b0:	20000730 	.word	0x20000730
 80027b4:	20000c10 	.word	0x20000c10
 80027b8:	20000c20 	.word	0x20000c20
 80027bc:	20000c0c 	.word	0x20000c0c
 80027c0:	20000734 	.word	0x20000734
 80027c4:	e000ed04 	.word	0xe000ed04

080027c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d017      	beq.n	800280a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <vTaskDelay+0x60>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00a      	beq.n	80027f8 <vTaskDelay+0x30>
	__asm volatile
 80027e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e6:	f383 8811 	msr	BASEPRI, r3
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	f3bf 8f4f 	dsb	sy
 80027f2:	60bb      	str	r3, [r7, #8]
}
 80027f4:	bf00      	nop
 80027f6:	e7fe      	b.n	80027f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80027f8:	f000 f880 	bl	80028fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80027fc:	2100      	movs	r1, #0
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fcea 	bl	80031d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002804:	f000 f888 	bl	8002918 <xTaskResumeAll>
 8002808:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d107      	bne.n	8002820 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <vTaskDelay+0x64>)
 8002812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f3bf 8f4f 	dsb	sy
 800281c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002820:	bf00      	nop
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	20000c2c 	.word	0x20000c2c
 800282c:	e000ed04 	.word	0xe000ed04

08002830 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800283e:	463a      	mov	r2, r7
 8002840:	1d39      	adds	r1, r7, #4
 8002842:	f107 0308 	add.w	r3, r7, #8
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff f848 	bl	80018dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800284c:	6839      	ldr	r1, [r7, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	9202      	str	r2, [sp, #8]
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	2300      	movs	r3, #0
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2300      	movs	r3, #0
 800285c:	460a      	mov	r2, r1
 800285e:	4921      	ldr	r1, [pc, #132]	; (80028e4 <vTaskStartScheduler+0xb4>)
 8002860:	4821      	ldr	r0, [pc, #132]	; (80028e8 <vTaskStartScheduler+0xb8>)
 8002862:	f7ff fe0f 	bl	8002484 <xTaskCreateStatic>
 8002866:	4603      	mov	r3, r0
 8002868:	4a20      	ldr	r2, [pc, #128]	; (80028ec <vTaskStartScheduler+0xbc>)
 800286a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800286c:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <vTaskStartScheduler+0xbc>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002874:	2301      	movs	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e001      	b.n	800287e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d102      	bne.n	800288a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002884:	f000 fcfc 	bl	8003280 <xTimerCreateTimerTask>
 8002888:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d116      	bne.n	80028be <vTaskStartScheduler+0x8e>
	__asm volatile
 8002890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002894:	f383 8811 	msr	BASEPRI, r3
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	613b      	str	r3, [r7, #16]
}
 80028a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <vTaskStartScheduler+0xc0>)
 80028a6:	f04f 32ff 	mov.w	r2, #4294967295
 80028aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <vTaskStartScheduler+0xc4>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <vTaskStartScheduler+0xc8>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80028b8:	f001 f8ba 	bl	8003a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80028bc:	e00e      	b.n	80028dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d10a      	bne.n	80028dc <vTaskStartScheduler+0xac>
	__asm volatile
 80028c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	60fb      	str	r3, [r7, #12]
}
 80028d8:	bf00      	nop
 80028da:	e7fe      	b.n	80028da <vTaskStartScheduler+0xaa>
}
 80028dc:	bf00      	nop
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	08004224 	.word	0x08004224
 80028e8:	08002f15 	.word	0x08002f15
 80028ec:	20000c28 	.word	0x20000c28
 80028f0:	20000c24 	.word	0x20000c24
 80028f4:	20000c10 	.word	0x20000c10
 80028f8:	20000c08 	.word	0x20000c08

080028fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002900:	4b04      	ldr	r3, [pc, #16]	; (8002914 <vTaskSuspendAll+0x18>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	4a03      	ldr	r2, [pc, #12]	; (8002914 <vTaskSuspendAll+0x18>)
 8002908:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	20000c2c 	.word	0x20000c2c

08002918 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002922:	2300      	movs	r3, #0
 8002924:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002926:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <xTaskResumeAll+0x118>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <xTaskResumeAll+0x2c>
	__asm volatile
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	603b      	str	r3, [r7, #0]
}
 8002940:	bf00      	nop
 8002942:	e7fe      	b.n	8002942 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002944:	f001 f916 	bl	8003b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002948:	4b39      	ldr	r3, [pc, #228]	; (8002a30 <xTaskResumeAll+0x118>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	3b01      	subs	r3, #1
 800294e:	4a38      	ldr	r2, [pc, #224]	; (8002a30 <xTaskResumeAll+0x118>)
 8002950:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002952:	4b37      	ldr	r3, [pc, #220]	; (8002a30 <xTaskResumeAll+0x118>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d162      	bne.n	8002a20 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800295a:	4b36      	ldr	r3, [pc, #216]	; (8002a34 <xTaskResumeAll+0x11c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d05e      	beq.n	8002a20 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002962:	e02f      	b.n	80029c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002964:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <xTaskResumeAll+0x120>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	3318      	adds	r3, #24
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff f871 	bl	8001a58 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3304      	adds	r3, #4
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff f86c 	bl	8001a58 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002984:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <xTaskResumeAll+0x124>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d903      	bls.n	8002994 <xTaskResumeAll+0x7c>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	4a2a      	ldr	r2, [pc, #168]	; (8002a3c <xTaskResumeAll+0x124>)
 8002992:	6013      	str	r3, [r2, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4a27      	ldr	r2, [pc, #156]	; (8002a40 <xTaskResumeAll+0x128>)
 80029a2:	441a      	add	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	3304      	adds	r3, #4
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f7fe fff7 	bl	800199e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <xTaskResumeAll+0x12c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d302      	bcc.n	80029c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80029be:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <xTaskResumeAll+0x130>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029c4:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <xTaskResumeAll+0x120>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1cb      	bne.n	8002964 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80029d2:	f000 fb55 	bl	8003080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029d6:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <xTaskResumeAll+0x134>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d010      	beq.n	8002a04 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80029e2:	f000 f847 	bl	8002a74 <xTaskIncrementTick>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d002      	beq.n	80029f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80029ec:	4b16      	ldr	r3, [pc, #88]	; (8002a48 <xTaskResumeAll+0x130>)
 80029ee:	2201      	movs	r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3b01      	subs	r3, #1
 80029f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f1      	bne.n	80029e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <xTaskResumeAll+0x134>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002a04:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <xTaskResumeAll+0x130>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <xTaskResumeAll+0x138>)
 8002a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002a20:	f001 f8d8 	bl	8003bd4 <vPortExitCritical>

	return xAlreadyYielded;
 8002a24:	68bb      	ldr	r3, [r7, #8]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000c2c 	.word	0x20000c2c
 8002a34:	20000c04 	.word	0x20000c04
 8002a38:	20000bc4 	.word	0x20000bc4
 8002a3c:	20000c0c 	.word	0x20000c0c
 8002a40:	20000734 	.word	0x20000734
 8002a44:	20000730 	.word	0x20000730
 8002a48:	20000c18 	.word	0x20000c18
 8002a4c:	20000c14 	.word	0x20000c14
 8002a50:	e000ed04 	.word	0xe000ed04

08002a54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002a5a:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <xTaskGetTickCount+0x1c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002a60:	687b      	ldr	r3, [r7, #4]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000c08 	.word	0x20000c08

08002a74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b086      	sub	sp, #24
 8002a78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a7e:	4b4f      	ldr	r3, [pc, #316]	; (8002bbc <xTaskIncrementTick+0x148>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f040 808f 	bne.w	8002ba6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a88:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <xTaskIncrementTick+0x14c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	3301      	adds	r3, #1
 8002a8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002a90:	4a4b      	ldr	r2, [pc, #300]	; (8002bc0 <xTaskIncrementTick+0x14c>)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d120      	bne.n	8002ade <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002a9c:	4b49      	ldr	r3, [pc, #292]	; (8002bc4 <xTaskIncrementTick+0x150>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <xTaskIncrementTick+0x48>
	__asm volatile
 8002aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	603b      	str	r3, [r7, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	e7fe      	b.n	8002aba <xTaskIncrementTick+0x46>
 8002abc:	4b41      	ldr	r3, [pc, #260]	; (8002bc4 <xTaskIncrementTick+0x150>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <xTaskIncrementTick+0x154>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a3f      	ldr	r2, [pc, #252]	; (8002bc4 <xTaskIncrementTick+0x150>)
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	4a3f      	ldr	r2, [pc, #252]	; (8002bc8 <xTaskIncrementTick+0x154>)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6013      	str	r3, [r2, #0]
 8002ad0:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <xTaskIncrementTick+0x158>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	4a3d      	ldr	r2, [pc, #244]	; (8002bcc <xTaskIncrementTick+0x158>)
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	f000 fad1 	bl	8003080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ade:	4b3c      	ldr	r3, [pc, #240]	; (8002bd0 <xTaskIncrementTick+0x15c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d349      	bcc.n	8002b7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ae8:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <xTaskIncrementTick+0x150>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d104      	bne.n	8002afc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002af2:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <xTaskIncrementTick+0x15c>)
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295
 8002af8:	601a      	str	r2, [r3, #0]
					break;
 8002afa:	e03f      	b.n	8002b7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002afc:	4b31      	ldr	r3, [pc, #196]	; (8002bc4 <xTaskIncrementTick+0x150>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d203      	bcs.n	8002b1c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002b14:	4a2e      	ldr	r2, [pc, #184]	; (8002bd0 <xTaskIncrementTick+0x15c>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002b1a:	e02f      	b.n	8002b7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe ff99 	bl	8001a58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d004      	beq.n	8002b38 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	3318      	adds	r3, #24
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fe ff90 	bl	8001a58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <xTaskIncrementTick+0x160>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d903      	bls.n	8002b4c <xTaskIncrementTick+0xd8>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	4a22      	ldr	r2, [pc, #136]	; (8002bd4 <xTaskIncrementTick+0x160>)
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4a1f      	ldr	r2, [pc, #124]	; (8002bd8 <xTaskIncrementTick+0x164>)
 8002b5a:	441a      	add	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f7fe ff1b 	bl	800199e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <xTaskIncrementTick+0x168>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d3b8      	bcc.n	8002ae8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002b76:	2301      	movs	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b7a:	e7b5      	b.n	8002ae8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002b7c:	4b17      	ldr	r3, [pc, #92]	; (8002bdc <xTaskIncrementTick+0x168>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b82:	4915      	ldr	r1, [pc, #84]	; (8002bd8 <xTaskIncrementTick+0x164>)
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d901      	bls.n	8002b98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002b94:	2301      	movs	r3, #1
 8002b96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <xTaskIncrementTick+0x16c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e004      	b.n	8002bb0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <xTaskIncrementTick+0x170>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3301      	adds	r3, #1
 8002bac:	4a0d      	ldr	r2, [pc, #52]	; (8002be4 <xTaskIncrementTick+0x170>)
 8002bae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002bb0:	697b      	ldr	r3, [r7, #20]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000c2c 	.word	0x20000c2c
 8002bc0:	20000c08 	.word	0x20000c08
 8002bc4:	20000bbc 	.word	0x20000bbc
 8002bc8:	20000bc0 	.word	0x20000bc0
 8002bcc:	20000c1c 	.word	0x20000c1c
 8002bd0:	20000c24 	.word	0x20000c24
 8002bd4:	20000c0c 	.word	0x20000c0c
 8002bd8:	20000734 	.word	0x20000734
 8002bdc:	20000730 	.word	0x20000730
 8002be0:	20000c18 	.word	0x20000c18
 8002be4:	20000c14 	.word	0x20000c14

08002be8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002bee:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <vTaskSwitchContext+0xa8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002bf6:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <vTaskSwitchContext+0xac>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002bfc:	e041      	b.n	8002c82 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8002bfe:	4b25      	ldr	r3, [pc, #148]	; (8002c94 <vTaskSwitchContext+0xac>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c04:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <vTaskSwitchContext+0xb0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e010      	b.n	8002c2e <vTaskSwitchContext+0x46>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10a      	bne.n	8002c28 <vTaskSwitchContext+0x40>
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	607b      	str	r3, [r7, #4]
}
 8002c24:	bf00      	nop
 8002c26:	e7fe      	b.n	8002c26 <vTaskSwitchContext+0x3e>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	491b      	ldr	r1, [pc, #108]	; (8002c9c <vTaskSwitchContext+0xb4>)
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0e4      	beq.n	8002c0c <vTaskSwitchContext+0x24>
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <vTaskSwitchContext+0xb4>)
 8002c4e:	4413      	add	r3, r2
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	605a      	str	r2, [r3, #4]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	3308      	adds	r3, #8
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d104      	bne.n	8002c72 <vTaskSwitchContext+0x8a>
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a09      	ldr	r2, [pc, #36]	; (8002ca0 <vTaskSwitchContext+0xb8>)
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4a06      	ldr	r2, [pc, #24]	; (8002c98 <vTaskSwitchContext+0xb0>)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6013      	str	r3, [r2, #0]
}
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	20000c2c 	.word	0x20000c2c
 8002c94:	20000c18 	.word	0x20000c18
 8002c98:	20000c0c 	.word	0x20000c0c
 8002c9c:	20000734 	.word	0x20000734
 8002ca0:	20000730 	.word	0x20000730

08002ca4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	60fb      	str	r3, [r7, #12]
}
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002cca:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <vTaskPlaceOnEventList+0x44>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3318      	adds	r3, #24
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fe fe87 	bl	80019e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002cd8:	2101      	movs	r1, #1
 8002cda:	6838      	ldr	r0, [r7, #0]
 8002cdc:	f000 fa7c 	bl	80031d8 <prvAddCurrentTaskToDelayedList>
}
 8002ce0:	bf00      	nop
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	20000730 	.word	0x20000730

08002cec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	617b      	str	r3, [r7, #20]
}
 8002d10:	bf00      	nop
 8002d12:	e7fe      	b.n	8002d12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002d14:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <vTaskPlaceOnEventListRestricted+0x54>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	3318      	adds	r3, #24
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f7fe fe3e 	bl	800199e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	68b8      	ldr	r0, [r7, #8]
 8002d32:	f000 fa51 	bl	80031d8 <prvAddCurrentTaskToDelayedList>
	}
 8002d36:	bf00      	nop
 8002d38:	3718      	adds	r7, #24
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000730 	.word	0x20000730

08002d44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10a      	bne.n	8002d70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	60fb      	str	r3, [r7, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	e7fe      	b.n	8002d6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	3318      	adds	r3, #24
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe fe6f 	bl	8001a58 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d7a:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <xTaskRemoveFromEventList+0xb0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d11d      	bne.n	8002dbe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	3304      	adds	r3, #4
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fe66 	bl	8001a58 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <xTaskRemoveFromEventList+0xb4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d903      	bls.n	8002da0 <xTaskRemoveFromEventList+0x5c>
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	4a16      	ldr	r2, [pc, #88]	; (8002df8 <xTaskRemoveFromEventList+0xb4>)
 8002d9e:	6013      	str	r3, [r2, #0]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da4:	4613      	mov	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4a13      	ldr	r2, [pc, #76]	; (8002dfc <xTaskRemoveFromEventList+0xb8>)
 8002dae:	441a      	add	r2, r3
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	3304      	adds	r3, #4
 8002db4:	4619      	mov	r1, r3
 8002db6:	4610      	mov	r0, r2
 8002db8:	f7fe fdf1 	bl	800199e <vListInsertEnd>
 8002dbc:	e005      	b.n	8002dca <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	480e      	ldr	r0, [pc, #56]	; (8002e00 <xTaskRemoveFromEventList+0xbc>)
 8002dc6:	f7fe fdea 	bl	800199e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <xTaskRemoveFromEventList+0xc0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d905      	bls.n	8002de4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <xTaskRemoveFromEventList+0xc4>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	e001      	b.n	8002de8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8002de8:	697b      	ldr	r3, [r7, #20]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000c2c 	.word	0x20000c2c
 8002df8:	20000c0c 	.word	0x20000c0c
 8002dfc:	20000734 	.word	0x20000734
 8002e00:	20000bc4 	.word	0x20000bc4
 8002e04:	20000730 	.word	0x20000730
 8002e08:	20000c18 	.word	0x20000c18

08002e0c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <vTaskInternalSetTimeOutState+0x24>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002e1c:	4b05      	ldr	r3, [pc, #20]	; (8002e34 <vTaskInternalSetTimeOutState+0x28>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	605a      	str	r2, [r3, #4]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	20000c1c 	.word	0x20000c1c
 8002e34:	20000c08 	.word	0x20000c08

08002e38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	613b      	str	r3, [r7, #16]
}
 8002e5a:	bf00      	nop
 8002e5c:	e7fe      	b.n	8002e5c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10a      	bne.n	8002e7a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	60fb      	str	r3, [r7, #12]
}
 8002e76:	bf00      	nop
 8002e78:	e7fe      	b.n	8002e78 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8002e7a:	f000 fe7b 	bl	8003b74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <xTaskCheckForTimeOut+0xbc>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d102      	bne.n	8002e9e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
 8002e9c:	e023      	b.n	8002ee6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <xTaskCheckForTimeOut+0xc0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d007      	beq.n	8002eba <xTaskCheckForTimeOut+0x82>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d302      	bcc.n	8002eba <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	61fb      	str	r3, [r7, #28]
 8002eb8:	e015      	b.n	8002ee6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d20b      	bcs.n	8002edc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	1ad2      	subs	r2, r2, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff ff9b 	bl	8002e0c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
 8002eda:	e004      	b.n	8002ee6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8002ee6:	f000 fe75 	bl	8003bd4 <vPortExitCritical>

	return xReturn;
 8002eea:	69fb      	ldr	r3, [r7, #28]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000c08 	.word	0x20000c08
 8002ef8:	20000c1c 	.word	0x20000c1c

08002efc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <vTaskMissedYield+0x14>)
 8002f02:	2201      	movs	r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	20000c18 	.word	0x20000c18

08002f14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f1c:	f000 f852 	bl	8002fc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <prvIdleTask+0x28>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d9f9      	bls.n	8002f1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <prvIdleTask+0x2c>)
 8002f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002f38:	e7f0      	b.n	8002f1c <prvIdleTask+0x8>
 8002f3a:	bf00      	nop
 8002f3c:	20000734 	.word	0x20000734
 8002f40:	e000ed04 	.word	0xe000ed04

08002f44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	e00c      	b.n	8002f6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <prvInitialiseTaskLists+0x60>)
 8002f5c:	4413      	add	r3, r2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fcf0 	bl	8001944 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3301      	adds	r3, #1
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b37      	cmp	r3, #55	; 0x37
 8002f6e:	d9ef      	bls.n	8002f50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f70:	480d      	ldr	r0, [pc, #52]	; (8002fa8 <prvInitialiseTaskLists+0x64>)
 8002f72:	f7fe fce7 	bl	8001944 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f76:	480d      	ldr	r0, [pc, #52]	; (8002fac <prvInitialiseTaskLists+0x68>)
 8002f78:	f7fe fce4 	bl	8001944 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f7c:	480c      	ldr	r0, [pc, #48]	; (8002fb0 <prvInitialiseTaskLists+0x6c>)
 8002f7e:	f7fe fce1 	bl	8001944 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f82:	480c      	ldr	r0, [pc, #48]	; (8002fb4 <prvInitialiseTaskLists+0x70>)
 8002f84:	f7fe fcde 	bl	8001944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f88:	480b      	ldr	r0, [pc, #44]	; (8002fb8 <prvInitialiseTaskLists+0x74>)
 8002f8a:	f7fe fcdb 	bl	8001944 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f8e:	4b0b      	ldr	r3, [pc, #44]	; (8002fbc <prvInitialiseTaskLists+0x78>)
 8002f90:	4a05      	ldr	r2, [pc, #20]	; (8002fa8 <prvInitialiseTaskLists+0x64>)
 8002f92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f94:	4b0a      	ldr	r3, [pc, #40]	; (8002fc0 <prvInitialiseTaskLists+0x7c>)
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <prvInitialiseTaskLists+0x68>)
 8002f98:	601a      	str	r2, [r3, #0]
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000734 	.word	0x20000734
 8002fa8:	20000b94 	.word	0x20000b94
 8002fac:	20000ba8 	.word	0x20000ba8
 8002fb0:	20000bc4 	.word	0x20000bc4
 8002fb4:	20000bd8 	.word	0x20000bd8
 8002fb8:	20000bf0 	.word	0x20000bf0
 8002fbc:	20000bbc 	.word	0x20000bbc
 8002fc0:	20000bc0 	.word	0x20000bc0

08002fc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fca:	e019      	b.n	8003000 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002fcc:	f000 fdd2 	bl	8003b74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fd0:	4b10      	ldr	r3, [pc, #64]	; (8003014 <prvCheckTasksWaitingTermination+0x50>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe fd3b 	bl	8001a58 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002fe2:	4b0d      	ldr	r3, [pc, #52]	; (8003018 <prvCheckTasksWaitingTermination+0x54>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <prvCheckTasksWaitingTermination+0x54>)
 8002fea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <prvCheckTasksWaitingTermination+0x58>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	; (800301c <prvCheckTasksWaitingTermination+0x58>)
 8002ff4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002ff6:	f000 fded 	bl	8003bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f810 	bl	8003020 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <prvCheckTasksWaitingTermination+0x58>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e1      	bne.n	8002fcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000bd8 	.word	0x20000bd8
 8003018:	20000c04 	.word	0x20000c04
 800301c:	20000bec 	.word	0x20000bec

08003020 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800302e:	2b00      	cmp	r3, #0
 8003030:	d108      	bne.n	8003044 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003036:	4618      	mov	r0, r3
 8003038:	f000 ff8a 	bl	8003f50 <vPortFree>
				vPortFree( pxTCB );
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 ff87 	bl	8003f50 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003042:	e018      	b.n	8003076 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800304a:	2b01      	cmp	r3, #1
 800304c:	d103      	bne.n	8003056 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 ff7e 	bl	8003f50 <vPortFree>
	}
 8003054:	e00f      	b.n	8003076 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800305c:	2b02      	cmp	r3, #2
 800305e:	d00a      	beq.n	8003076 <prvDeleteTCB+0x56>
	__asm volatile
 8003060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	60fb      	str	r3, [r7, #12]
}
 8003072:	bf00      	nop
 8003074:	e7fe      	b.n	8003074 <prvDeleteTCB+0x54>
	}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
	...

08003080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <prvResetNextTaskUnblockTime+0x38>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003090:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <prvResetNextTaskUnblockTime+0x3c>)
 8003092:	f04f 32ff 	mov.w	r2, #4294967295
 8003096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003098:	e008      	b.n	80030ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <prvResetNextTaskUnblockTime+0x38>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a04      	ldr	r2, [pc, #16]	; (80030bc <prvResetNextTaskUnblockTime+0x3c>)
 80030aa:	6013      	str	r3, [r2, #0]
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	20000bbc 	.word	0x20000bbc
 80030bc:	20000c24 	.word	0x20000c24

080030c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <xTaskGetSchedulerState+0x34>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80030ce:	2301      	movs	r3, #1
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	e008      	b.n	80030e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <xTaskGetSchedulerState+0x38>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d102      	bne.n	80030e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80030dc:	2302      	movs	r3, #2
 80030de:	607b      	str	r3, [r7, #4]
 80030e0:	e001      	b.n	80030e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80030e2:	2300      	movs	r3, #0
 80030e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80030e6:	687b      	ldr	r3, [r7, #4]
	}
 80030e8:	4618      	mov	r0, r3
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	20000c10 	.word	0x20000c10
 80030f8:	20000c2c 	.word	0x20000c2c

080030fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d056      	beq.n	80031c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003112:	4b2e      	ldr	r3, [pc, #184]	; (80031cc <xTaskPriorityDisinherit+0xd0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	429a      	cmp	r2, r3
 800311a:	d00a      	beq.n	8003132 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	60fb      	str	r3, [r7, #12]
}
 800312e:	bf00      	nop
 8003130:	e7fe      	b.n	8003130 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800313a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313e:	f383 8811 	msr	BASEPRI, r3
 8003142:	f3bf 8f6f 	isb	sy
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	60bb      	str	r3, [r7, #8]
}
 800314c:	bf00      	nop
 800314e:	e7fe      	b.n	800314e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	1e5a      	subs	r2, r3, #1
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003162:	429a      	cmp	r2, r3
 8003164:	d02c      	beq.n	80031c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316a:	2b00      	cmp	r3, #0
 800316c:	d128      	bne.n	80031c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	3304      	adds	r3, #4
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe fc70 	bl	8001a58 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003190:	4b0f      	ldr	r3, [pc, #60]	; (80031d0 <xTaskPriorityDisinherit+0xd4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d903      	bls.n	80031a0 <xTaskPriorityDisinherit+0xa4>
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	4a0c      	ldr	r2, [pc, #48]	; (80031d0 <xTaskPriorityDisinherit+0xd4>)
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <xTaskPriorityDisinherit+0xd8>)
 80031ae:	441a      	add	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	3304      	adds	r3, #4
 80031b4:	4619      	mov	r1, r3
 80031b6:	4610      	mov	r0, r2
 80031b8:	f7fe fbf1 	bl	800199e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80031bc:	2301      	movs	r3, #1
 80031be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80031c0:	697b      	ldr	r3, [r7, #20]
	}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000730 	.word	0x20000730
 80031d0:	20000c0c 	.word	0x20000c0c
 80031d4:	20000734 	.word	0x20000734

080031d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80031e2:	4b21      	ldr	r3, [pc, #132]	; (8003268 <prvAddCurrentTaskToDelayedList+0x90>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031e8:	4b20      	ldr	r3, [pc, #128]	; (800326c <prvAddCurrentTaskToDelayedList+0x94>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fe fc32 	bl	8001a58 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fa:	d10a      	bne.n	8003212 <prvAddCurrentTaskToDelayedList+0x3a>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <prvAddCurrentTaskToDelayedList+0x94>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3304      	adds	r3, #4
 8003208:	4619      	mov	r1, r3
 800320a:	4819      	ldr	r0, [pc, #100]	; (8003270 <prvAddCurrentTaskToDelayedList+0x98>)
 800320c:	f7fe fbc7 	bl	800199e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003210:	e026      	b.n	8003260 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800321a:	4b14      	ldr	r3, [pc, #80]	; (800326c <prvAddCurrentTaskToDelayedList+0x94>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	429a      	cmp	r2, r3
 8003228:	d209      	bcs.n	800323e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <prvAddCurrentTaskToDelayedList+0x9c>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b0f      	ldr	r3, [pc, #60]	; (800326c <prvAddCurrentTaskToDelayedList+0x94>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3304      	adds	r3, #4
 8003234:	4619      	mov	r1, r3
 8003236:	4610      	mov	r0, r2
 8003238:	f7fe fbd5 	bl	80019e6 <vListInsert>
}
 800323c:	e010      	b.n	8003260 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800323e:	4b0e      	ldr	r3, [pc, #56]	; (8003278 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4b0a      	ldr	r3, [pc, #40]	; (800326c <prvAddCurrentTaskToDelayedList+0x94>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3304      	adds	r3, #4
 8003248:	4619      	mov	r1, r3
 800324a:	4610      	mov	r0, r2
 800324c:	f7fe fbcb 	bl	80019e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68ba      	ldr	r2, [r7, #8]
 8003256:	429a      	cmp	r2, r3
 8003258:	d202      	bcs.n	8003260 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800325a:	4a08      	ldr	r2, [pc, #32]	; (800327c <prvAddCurrentTaskToDelayedList+0xa4>)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	6013      	str	r3, [r2, #0]
}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	20000c08 	.word	0x20000c08
 800326c:	20000730 	.word	0x20000730
 8003270:	20000bf0 	.word	0x20000bf0
 8003274:	20000bc0 	.word	0x20000bc0
 8003278:	20000bbc 	.word	0x20000bbc
 800327c:	20000c24 	.word	0x20000c24

08003280 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800328a:	f000 fb07 	bl	800389c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800328e:	4b1c      	ldr	r3, [pc, #112]	; (8003300 <xTimerCreateTimerTask+0x80>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d021      	beq.n	80032da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800329e:	1d3a      	adds	r2, r7, #4
 80032a0:	f107 0108 	add.w	r1, r7, #8
 80032a4:	f107 030c 	add.w	r3, r7, #12
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe fb31 	bl	8001910 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	68fa      	ldr	r2, [r7, #12]
 80032b4:	9202      	str	r2, [sp, #8]
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	2302      	movs	r3, #2
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2300      	movs	r3, #0
 80032be:	460a      	mov	r2, r1
 80032c0:	4910      	ldr	r1, [pc, #64]	; (8003304 <xTimerCreateTimerTask+0x84>)
 80032c2:	4811      	ldr	r0, [pc, #68]	; (8003308 <xTimerCreateTimerTask+0x88>)
 80032c4:	f7ff f8de 	bl	8002484 <xTaskCreateStatic>
 80032c8:	4603      	mov	r3, r0
 80032ca:	4a10      	ldr	r2, [pc, #64]	; (800330c <xTimerCreateTimerTask+0x8c>)
 80032cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <xTimerCreateTimerTask+0x8c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80032d6:	2301      	movs	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	613b      	str	r3, [r7, #16]
}
 80032f2:	bf00      	nop
 80032f4:	e7fe      	b.n	80032f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80032f6:	697b      	ldr	r3, [r7, #20]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000c60 	.word	0x20000c60
 8003304:	0800422c 	.word	0x0800422c
 8003308:	08003445 	.word	0x08003445
 800330c:	20000c64 	.word	0x20000c64

08003310 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	607a      	str	r2, [r7, #4]
 800331c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	623b      	str	r3, [r7, #32]
}
 800333a:	bf00      	nop
 800333c:	e7fe      	b.n	800333c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800333e:	4b1a      	ldr	r3, [pc, #104]	; (80033a8 <xTimerGenericCommand+0x98>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d02a      	beq.n	800339c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b05      	cmp	r3, #5
 8003356:	dc18      	bgt.n	800338a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003358:	f7ff feb2 	bl	80030c0 <xTaskGetSchedulerState>
 800335c:	4603      	mov	r3, r0
 800335e:	2b02      	cmp	r3, #2
 8003360:	d109      	bne.n	8003376 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003362:	4b11      	ldr	r3, [pc, #68]	; (80033a8 <xTimerGenericCommand+0x98>)
 8003364:	6818      	ldr	r0, [r3, #0]
 8003366:	f107 0110 	add.w	r1, r7, #16
 800336a:	2300      	movs	r3, #0
 800336c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800336e:	f7fe fca1 	bl	8001cb4 <xQueueGenericSend>
 8003372:	6278      	str	r0, [r7, #36]	; 0x24
 8003374:	e012      	b.n	800339c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003376:	4b0c      	ldr	r3, [pc, #48]	; (80033a8 <xTimerGenericCommand+0x98>)
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	f107 0110 	add.w	r1, r7, #16
 800337e:	2300      	movs	r3, #0
 8003380:	2200      	movs	r2, #0
 8003382:	f7fe fc97 	bl	8001cb4 <xQueueGenericSend>
 8003386:	6278      	str	r0, [r7, #36]	; 0x24
 8003388:	e008      	b.n	800339c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800338a:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <xTimerGenericCommand+0x98>)
 800338c:	6818      	ldr	r0, [r3, #0]
 800338e:	f107 0110 	add.w	r1, r7, #16
 8003392:	2300      	movs	r3, #0
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	f7fe fd8b 	bl	8001eb0 <xQueueGenericSendFromISR>
 800339a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3728      	adds	r7, #40	; 0x28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000c60 	.word	0x20000c60

080033ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b6:	4b22      	ldr	r3, [pc, #136]	; (8003440 <prvProcessExpiredTimer+0x94>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	3304      	adds	r3, #4
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fe fb47 	bl	8001a58 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d022      	beq.n	800341e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	699a      	ldr	r2, [r3, #24]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	18d1      	adds	r1, r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	6978      	ldr	r0, [r7, #20]
 80033e6:	f000 f8d1 	bl	800358c <prvInsertTimerInActiveList>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01f      	beq.n	8003430 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80033f0:	2300      	movs	r3, #0
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2300      	movs	r3, #0
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	2100      	movs	r1, #0
 80033fa:	6978      	ldr	r0, [r7, #20]
 80033fc:	f7ff ff88 	bl	8003310 <xTimerGenericCommand>
 8003400:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d113      	bne.n	8003430 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	60fb      	str	r3, [r7, #12]
}
 800341a:	bf00      	nop
 800341c:	e7fe      	b.n	800341c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003424:	f023 0301 	bic.w	r3, r3, #1
 8003428:	b2da      	uxtb	r2, r3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	6978      	ldr	r0, [r7, #20]
 8003436:	4798      	blx	r3
}
 8003438:	bf00      	nop
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20000c58 	.word	0x20000c58

08003444 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800344c:	f107 0308 	add.w	r3, r7, #8
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f857 	bl	8003504 <prvGetNextExpireTime>
 8003456:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4619      	mov	r1, r3
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f803 	bl	8003468 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003462:	f000 f8d5 	bl	8003610 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003466:	e7f1      	b.n	800344c <prvTimerTask+0x8>

08003468 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003472:	f7ff fa43 	bl	80028fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003476:	f107 0308 	add.w	r3, r7, #8
 800347a:	4618      	mov	r0, r3
 800347c:	f000 f866 	bl	800354c <prvSampleTimeNow>
 8003480:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d130      	bne.n	80034ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10a      	bne.n	80034a4 <prvProcessTimerOrBlockTask+0x3c>
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	429a      	cmp	r2, r3
 8003494:	d806      	bhi.n	80034a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003496:	f7ff fa3f 	bl	8002918 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800349a:	68f9      	ldr	r1, [r7, #12]
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff85 	bl	80033ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80034a2:	e024      	b.n	80034ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d008      	beq.n	80034bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80034aa:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <prvProcessTimerOrBlockTask+0x90>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <prvProcessTimerOrBlockTask+0x50>
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <prvProcessTimerOrBlockTask+0x52>
 80034b8:	2300      	movs	r3, #0
 80034ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80034bc:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <prvProcessTimerOrBlockTask+0x94>)
 80034be:	6818      	ldr	r0, [r3, #0]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	4619      	mov	r1, r3
 80034ca:	f7fe ffa7 	bl	800241c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80034ce:	f7ff fa23 	bl	8002918 <xTaskResumeAll>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <prvProcessTimerOrBlockTask+0x98>)
 80034da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	f3bf 8f6f 	isb	sy
}
 80034e8:	e001      	b.n	80034ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80034ea:	f7ff fa15 	bl	8002918 <xTaskResumeAll>
}
 80034ee:	bf00      	nop
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	20000c5c 	.word	0x20000c5c
 80034fc:	20000c60 	.word	0x20000c60
 8003500:	e000ed04 	.word	0xe000ed04

08003504 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800350c:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <prvGetNextExpireTime+0x44>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <prvGetNextExpireTime+0x16>
 8003516:	2201      	movs	r2, #1
 8003518:	e000      	b.n	800351c <prvGetNextExpireTime+0x18>
 800351a:	2200      	movs	r2, #0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003528:	4b07      	ldr	r3, [pc, #28]	; (8003548 <prvGetNextExpireTime+0x44>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	e001      	b.n	8003538 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003538:	68fb      	ldr	r3, [r7, #12]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	20000c58 	.word	0x20000c58

0800354c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003554:	f7ff fa7e 	bl	8002a54 <xTaskGetTickCount>
 8003558:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <prvSampleTimeNow+0x3c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	429a      	cmp	r2, r3
 8003562:	d205      	bcs.n	8003570 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003564:	f000 f936 	bl	80037d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	e002      	b.n	8003576 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003576:	4a04      	ldr	r2, [pc, #16]	; (8003588 <prvSampleTimeNow+0x3c>)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800357c:	68fb      	ldr	r3, [r7, #12]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3710      	adds	r7, #16
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000c68 	.word	0x20000c68

0800358c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800359a:	2300      	movs	r3, #0
 800359c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d812      	bhi.n	80035d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	1ad2      	subs	r2, r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d302      	bcc.n	80035c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80035c0:	2301      	movs	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	e01b      	b.n	80035fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <prvInsertTimerInActiveList+0x7c>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	3304      	adds	r3, #4
 80035ce:	4619      	mov	r1, r3
 80035d0:	4610      	mov	r0, r2
 80035d2:	f7fe fa08 	bl	80019e6 <vListInsert>
 80035d6:	e012      	b.n	80035fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d206      	bcs.n	80035ee <prvInsertTimerInActiveList+0x62>
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d302      	bcc.n	80035ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80035e8:	2301      	movs	r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	e007      	b.n	80035fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80035ee:	4b07      	ldr	r3, [pc, #28]	; (800360c <prvInsertTimerInActiveList+0x80>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4619      	mov	r1, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	f7fe f9f4 	bl	80019e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80035fe:	697b      	ldr	r3, [r7, #20]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20000c5c 	.word	0x20000c5c
 800360c:	20000c58 	.word	0x20000c58

08003610 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08e      	sub	sp, #56	; 0x38
 8003614:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003616:	e0ca      	b.n	80037ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	da18      	bge.n	8003650 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	3304      	adds	r3, #4
 8003622:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	61fb      	str	r3, [r7, #28]
}
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003646:	6850      	ldr	r0, [r2, #4]
 8003648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800364a:	6892      	ldr	r2, [r2, #8]
 800364c:	4611      	mov	r1, r2
 800364e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	f2c0 80aa 	blt.w	80037ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d004      	beq.n	800366e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	3304      	adds	r3, #4
 8003668:	4618      	mov	r0, r3
 800366a:	f7fe f9f5 	bl	8001a58 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800366e:	463b      	mov	r3, r7
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff6b 	bl	800354c <prvSampleTimeNow>
 8003676:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b09      	cmp	r3, #9
 800367c:	f200 8097 	bhi.w	80037ae <prvProcessReceivedCommands+0x19e>
 8003680:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <prvProcessReceivedCommands+0x78>)
 8003682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003686:	bf00      	nop
 8003688:	080036b1 	.word	0x080036b1
 800368c:	080036b1 	.word	0x080036b1
 8003690:	080036b1 	.word	0x080036b1
 8003694:	08003725 	.word	0x08003725
 8003698:	08003739 	.word	0x08003739
 800369c:	08003783 	.word	0x08003783
 80036a0:	080036b1 	.word	0x080036b1
 80036a4:	080036b1 	.word	0x080036b1
 80036a8:	08003725 	.word	0x08003725
 80036ac:	08003739 	.word	0x08003739
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036b6:	f043 0301 	orr.w	r3, r3, #1
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	18d1      	adds	r1, r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036d0:	f7ff ff5c 	bl	800358c <prvInsertTimerInActiveList>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d069      	beq.n	80037ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d05e      	beq.n	80037ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	441a      	add	r2, r3
 80036f8:	2300      	movs	r3, #0
 80036fa:	9300      	str	r3, [sp, #0]
 80036fc:	2300      	movs	r3, #0
 80036fe:	2100      	movs	r1, #0
 8003700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003702:	f7ff fe05 	bl	8003310 <xTimerGenericCommand>
 8003706:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d14f      	bne.n	80037ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	61bb      	str	r3, [r7, #24]
}
 8003720:	bf00      	nop
 8003722:	e7fe      	b.n	8003722 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800372a:	f023 0301 	bic.w	r3, r3, #1
 800372e:	b2da      	uxtb	r2, r3
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003736:	e03a      	b.n	80037ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	b2da      	uxtb	r2, r3
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003746:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	617b      	str	r3, [r7, #20]
}
 800376a:	bf00      	nop
 800376c:	e7fe      	b.n	800376c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	18d1      	adds	r1, r2, r3
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800377c:	f7ff ff06 	bl	800358c <prvInsertTimerInActiveList>
					break;
 8003780:	e015      	b.n	80037ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d103      	bne.n	8003798 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003790:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003792:	f000 fbdd 	bl	8003f50 <vPortFree>
 8003796:	e00a      	b.n	80037ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80037aa:	e000      	b.n	80037ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80037ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80037ae:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <prvProcessReceivedCommands+0x1c0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	1d39      	adds	r1, r7, #4
 80037b4:	2200      	movs	r2, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe fc16 	bl	8001fe8 <xQueueReceive>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f47f af2a 	bne.w	8003618 <prvProcessReceivedCommands+0x8>
	}
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3730      	adds	r7, #48	; 0x30
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000c60 	.word	0x20000c60

080037d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80037da:	e048      	b.n	800386e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80037dc:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <prvSwitchTimerLists+0xc0>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037e6:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <prvSwitchTimerLists+0xc0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3304      	adds	r3, #4
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe f92f 	bl	8001a58 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	68f8      	ldr	r0, [r7, #12]
 8003800:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003808:	f003 0304 	and.w	r3, r3, #4
 800380c:	2b00      	cmp	r3, #0
 800380e:	d02e      	beq.n	800386e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	429a      	cmp	r2, r3
 8003820:	d90e      	bls.n	8003840 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800382e:	4b19      	ldr	r3, [pc, #100]	; (8003894 <prvSwitchTimerLists+0xc0>)
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3304      	adds	r3, #4
 8003836:	4619      	mov	r1, r3
 8003838:	4610      	mov	r0, r2
 800383a:	f7fe f8d4 	bl	80019e6 <vListInsert>
 800383e:	e016      	b.n	800386e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003840:	2300      	movs	r3, #0
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2300      	movs	r3, #0
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	2100      	movs	r1, #0
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f7ff fd60 	bl	8003310 <xTimerGenericCommand>
 8003850:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	603b      	str	r3, [r7, #0]
}
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <prvSwitchTimerLists+0xc0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1b1      	bne.n	80037dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003878:	4b06      	ldr	r3, [pc, #24]	; (8003894 <prvSwitchTimerLists+0xc0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <prvSwitchTimerLists+0xc4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a04      	ldr	r2, [pc, #16]	; (8003894 <prvSwitchTimerLists+0xc0>)
 8003884:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003886:	4a04      	ldr	r2, [pc, #16]	; (8003898 <prvSwitchTimerLists+0xc4>)
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	6013      	str	r3, [r2, #0]
}
 800388c:	bf00      	nop
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000c58 	.word	0x20000c58
 8003898:	20000c5c 	.word	0x20000c5c

0800389c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80038a2:	f000 f967 	bl	8003b74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80038a6:	4b15      	ldr	r3, [pc, #84]	; (80038fc <prvCheckForValidListAndQueue+0x60>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d120      	bne.n	80038f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80038ae:	4814      	ldr	r0, [pc, #80]	; (8003900 <prvCheckForValidListAndQueue+0x64>)
 80038b0:	f7fe f848 	bl	8001944 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80038b4:	4813      	ldr	r0, [pc, #76]	; (8003904 <prvCheckForValidListAndQueue+0x68>)
 80038b6:	f7fe f845 	bl	8001944 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <prvCheckForValidListAndQueue+0x6c>)
 80038bc:	4a10      	ldr	r2, [pc, #64]	; (8003900 <prvCheckForValidListAndQueue+0x64>)
 80038be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <prvCheckForValidListAndQueue+0x70>)
 80038c2:	4a10      	ldr	r2, [pc, #64]	; (8003904 <prvCheckForValidListAndQueue+0x68>)
 80038c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80038c6:	2300      	movs	r3, #0
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <prvCheckForValidListAndQueue+0x74>)
 80038cc:	4a11      	ldr	r2, [pc, #68]	; (8003914 <prvCheckForValidListAndQueue+0x78>)
 80038ce:	2110      	movs	r1, #16
 80038d0:	200a      	movs	r0, #10
 80038d2:	f7fe f953 	bl	8001b7c <xQueueGenericCreateStatic>
 80038d6:	4603      	mov	r3, r0
 80038d8:	4a08      	ldr	r2, [pc, #32]	; (80038fc <prvCheckForValidListAndQueue+0x60>)
 80038da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80038dc:	4b07      	ldr	r3, [pc, #28]	; (80038fc <prvCheckForValidListAndQueue+0x60>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <prvCheckForValidListAndQueue+0x60>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	490b      	ldr	r1, [pc, #44]	; (8003918 <prvCheckForValidListAndQueue+0x7c>)
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fe fd6c 	bl	80023c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80038f0:	f000 f970 	bl	8003bd4 <vPortExitCritical>
}
 80038f4:	bf00      	nop
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000c60 	.word	0x20000c60
 8003900:	20000c30 	.word	0x20000c30
 8003904:	20000c44 	.word	0x20000c44
 8003908:	20000c58 	.word	0x20000c58
 800390c:	20000c5c 	.word	0x20000c5c
 8003910:	20000d0c 	.word	0x20000d0c
 8003914:	20000c6c 	.word	0x20000c6c
 8003918:	08004234 	.word	0x08004234

0800391c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	3b04      	subs	r3, #4
 800392c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	3b04      	subs	r3, #4
 800393a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f023 0201 	bic.w	r2, r3, #1
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	3b04      	subs	r3, #4
 800394a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800394c:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <pxPortInitialiseStack+0x64>)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3b14      	subs	r3, #20
 8003956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	3b04      	subs	r3, #4
 8003962:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f06f 0202 	mvn.w	r2, #2
 800396a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3b20      	subs	r3, #32
 8003970:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003972:	68fb      	ldr	r3, [r7, #12]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	08003985 	.word	0x08003985

08003984 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800398e:	4b12      	ldr	r3, [pc, #72]	; (80039d8 <prvTaskExitError+0x54>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d00a      	beq.n	80039ae <prvTaskExitError+0x2a>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	60fb      	str	r3, [r7, #12]
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <prvTaskExitError+0x28>
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	60bb      	str	r3, [r7, #8]
}
 80039c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80039c2:	bf00      	nop
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0fc      	beq.n	80039c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80039ca:	bf00      	nop
 80039cc:	bf00      	nop
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	2000000c 	.word	0x2000000c
 80039dc:	00000000 	.word	0x00000000

080039e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80039e0:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <pxCurrentTCBConst2>)
 80039e2:	6819      	ldr	r1, [r3, #0]
 80039e4:	6808      	ldr	r0, [r1, #0]
 80039e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ea:	f380 8809 	msr	PSP, r0
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f04f 0000 	mov.w	r0, #0
 80039f6:	f380 8811 	msr	BASEPRI, r0
 80039fa:	4770      	bx	lr
 80039fc:	f3af 8000 	nop.w

08003a00 <pxCurrentTCBConst2>:
 8003a00:	20000730 	.word	0x20000730
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop

08003a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003a08:	4808      	ldr	r0, [pc, #32]	; (8003a2c <prvPortStartFirstTask+0x24>)
 8003a0a:	6800      	ldr	r0, [r0, #0]
 8003a0c:	6800      	ldr	r0, [r0, #0]
 8003a0e:	f380 8808 	msr	MSP, r0
 8003a12:	f04f 0000 	mov.w	r0, #0
 8003a16:	f380 8814 	msr	CONTROL, r0
 8003a1a:	b662      	cpsie	i
 8003a1c:	b661      	cpsie	f
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	df00      	svc	0
 8003a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003a2a:	bf00      	nop
 8003a2c:	e000ed08 	.word	0xe000ed08

08003a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a36:	4b46      	ldr	r3, [pc, #280]	; (8003b50 <xPortStartScheduler+0x120>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a46      	ldr	r2, [pc, #280]	; (8003b54 <xPortStartScheduler+0x124>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d10a      	bne.n	8003a56 <xPortStartScheduler+0x26>
	__asm volatile
 8003a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a44:	f383 8811 	msr	BASEPRI, r3
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	f3bf 8f4f 	dsb	sy
 8003a50:	613b      	str	r3, [r7, #16]
}
 8003a52:	bf00      	nop
 8003a54:	e7fe      	b.n	8003a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003a56:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <xPortStartScheduler+0x120>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a3f      	ldr	r2, [pc, #252]	; (8003b58 <xPortStartScheduler+0x128>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d10a      	bne.n	8003a76 <xPortStartScheduler+0x46>
	__asm volatile
 8003a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a64:	f383 8811 	msr	BASEPRI, r3
 8003a68:	f3bf 8f6f 	isb	sy
 8003a6c:	f3bf 8f4f 	dsb	sy
 8003a70:	60fb      	str	r3, [r7, #12]
}
 8003a72:	bf00      	nop
 8003a74:	e7fe      	b.n	8003a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a76:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <xPortStartScheduler+0x12c>)
 8003a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	22ff      	movs	r2, #255	; 0xff
 8003a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <xPortStartScheduler+0x130>)
 8003a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a9e:	4b31      	ldr	r3, [pc, #196]	; (8003b64 <xPortStartScheduler+0x134>)
 8003aa0:	2207      	movs	r2, #7
 8003aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003aa4:	e009      	b.n	8003aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003aa6:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <xPortStartScheduler+0x134>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	4a2d      	ldr	r2, [pc, #180]	; (8003b64 <xPortStartScheduler+0x134>)
 8003aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac2:	2b80      	cmp	r3, #128	; 0x80
 8003ac4:	d0ef      	beq.n	8003aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ac6:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <xPortStartScheduler+0x134>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f1c3 0307 	rsb	r3, r3, #7
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d00a      	beq.n	8003ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	60bb      	str	r3, [r7, #8]
}
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ae8:	4b1e      	ldr	r3, [pc, #120]	; (8003b64 <xPortStartScheduler+0x134>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <xPortStartScheduler+0x134>)
 8003af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003af2:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <xPortStartScheduler+0x134>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003afa:	4a1a      	ldr	r2, [pc, #104]	; (8003b64 <xPortStartScheduler+0x134>)
 8003afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003b06:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003b12:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a14      	ldr	r2, [pc, #80]	; (8003b68 <xPortStartScheduler+0x138>)
 8003b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003b1e:	f000 f8dd 	bl	8003cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <xPortStartScheduler+0x13c>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003b28:	f000 f8fc 	bl	8003d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b2c:	4b10      	ldr	r3, [pc, #64]	; (8003b70 <xPortStartScheduler+0x140>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0f      	ldr	r2, [pc, #60]	; (8003b70 <xPortStartScheduler+0x140>)
 8003b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003b38:	f7ff ff66 	bl	8003a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b3c:	f7ff f854 	bl	8002be8 <vTaskSwitchContext>
	prvTaskExitError();
 8003b40:	f7ff ff20 	bl	8003984 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	e000ed00 	.word	0xe000ed00
 8003b54:	410fc271 	.word	0x410fc271
 8003b58:	410fc270 	.word	0x410fc270
 8003b5c:	e000e400 	.word	0xe000e400
 8003b60:	20000d5c 	.word	0x20000d5c
 8003b64:	20000d60 	.word	0x20000d60
 8003b68:	e000ed20 	.word	0xe000ed20
 8003b6c:	2000000c 	.word	0x2000000c
 8003b70:	e000ef34 	.word	0xe000ef34

08003b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
	__asm volatile
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	607b      	str	r3, [r7, #4]
}
 8003b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003b8e:	4b0f      	ldr	r3, [pc, #60]	; (8003bcc <vPortEnterCritical+0x58>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3301      	adds	r3, #1
 8003b94:	4a0d      	ldr	r2, [pc, #52]	; (8003bcc <vPortEnterCritical+0x58>)
 8003b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003b98:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <vPortEnterCritical+0x58>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d10f      	bne.n	8003bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <vPortEnterCritical+0x5c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	603b      	str	r3, [r7, #0]
}
 8003bbc:	bf00      	nop
 8003bbe:	e7fe      	b.n	8003bbe <vPortEnterCritical+0x4a>
	}
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	2000000c 	.word	0x2000000c
 8003bd0:	e000ed04 	.word	0xe000ed04

08003bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003bda:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <vPortExitCritical+0x50>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <vPortExitCritical+0x24>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	607b      	str	r3, [r7, #4]
}
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003bf8:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <vPortExitCritical+0x50>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <vPortExitCritical+0x50>)
 8003c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003c02:	4b08      	ldr	r3, [pc, #32]	; (8003c24 <vPortExitCritical+0x50>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <vPortExitCritical+0x42>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	f383 8811 	msr	BASEPRI, r3
}
 8003c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	2000000c 	.word	0x2000000c
	...

08003c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c30:	f3ef 8009 	mrs	r0, PSP
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <pxCurrentTCBConst>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	f01e 0f10 	tst.w	lr, #16
 8003c40:	bf08      	it	eq
 8003c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c4a:	6010      	str	r0, [r2, #0]
 8003c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003c54:	f380 8811 	msr	BASEPRI, r0
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f7fe ffc2 	bl	8002be8 <vTaskSwitchContext>
 8003c64:	f04f 0000 	mov.w	r0, #0
 8003c68:	f380 8811 	msr	BASEPRI, r0
 8003c6c:	bc09      	pop	{r0, r3}
 8003c6e:	6819      	ldr	r1, [r3, #0]
 8003c70:	6808      	ldr	r0, [r1, #0]
 8003c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c76:	f01e 0f10 	tst.w	lr, #16
 8003c7a:	bf08      	it	eq
 8003c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003c80:	f380 8809 	msr	PSP, r0
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	f3af 8000 	nop.w

08003c90 <pxCurrentTCBConst>:
 8003c90:	20000730 	.word	0x20000730
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003c94:	bf00      	nop
 8003c96:	bf00      	nop

08003c98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	607b      	str	r3, [r7, #4]
}
 8003cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003cb2:	f7fe fedf 	bl	8002a74 <xTaskIncrementTick>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <xPortSysTickHandler+0x40>)
 8003cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	f383 8811 	msr	BASEPRI, r3
}
 8003cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003cd0:	bf00      	nop
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <vPortSetupTimerInterrupt+0x34>)
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <vPortSetupTimerInterrupt+0x38>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cec:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <vPortSetupTimerInterrupt+0x3c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <vPortSetupTimerInterrupt+0x40>)
 8003cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf6:	099b      	lsrs	r3, r3, #6
 8003cf8:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <vPortSetupTimerInterrupt+0x44>)
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003cfe:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <vPortSetupTimerInterrupt+0x34>)
 8003d00:	2207      	movs	r2, #7
 8003d02:	601a      	str	r2, [r3, #0]
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	e000e010 	.word	0xe000e010
 8003d14:	e000e018 	.word	0xe000e018
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	10624dd3 	.word	0x10624dd3
 8003d20:	e000e014 	.word	0xe000e014

08003d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003d34 <vPortEnableVFP+0x10>
 8003d28:	6801      	ldr	r1, [r0, #0]
 8003d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d2e:	6001      	str	r1, [r0, #0]
 8003d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003d32:	bf00      	nop
 8003d34:	e000ed88 	.word	0xe000ed88

08003d38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003d3e:	f3ef 8305 	mrs	r3, IPSR
 8003d42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2b0f      	cmp	r3, #15
 8003d48:	d914      	bls.n	8003d74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003d4a:	4a17      	ldr	r2, [pc, #92]	; (8003da8 <vPortValidateInterruptPriority+0x70>)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	4413      	add	r3, r2
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003d54:	4b15      	ldr	r3, [pc, #84]	; (8003dac <vPortValidateInterruptPriority+0x74>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	7afa      	ldrb	r2, [r7, #11]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d20a      	bcs.n	8003d74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d62:	f383 8811 	msr	BASEPRI, r3
 8003d66:	f3bf 8f6f 	isb	sy
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	607b      	str	r3, [r7, #4]
}
 8003d70:	bf00      	nop
 8003d72:	e7fe      	b.n	8003d72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003d74:	4b0e      	ldr	r3, [pc, #56]	; (8003db0 <vPortValidateInterruptPriority+0x78>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d7c:	4b0d      	ldr	r3, [pc, #52]	; (8003db4 <vPortValidateInterruptPriority+0x7c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d90a      	bls.n	8003d9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	603b      	str	r3, [r7, #0]
}
 8003d96:	bf00      	nop
 8003d98:	e7fe      	b.n	8003d98 <vPortValidateInterruptPriority+0x60>
	}
 8003d9a:	bf00      	nop
 8003d9c:	3714      	adds	r7, #20
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	e000e3f0 	.word	0xe000e3f0
 8003dac:	20000d5c 	.word	0x20000d5c
 8003db0:	e000ed0c 	.word	0xe000ed0c
 8003db4:	20000d60 	.word	0x20000d60

08003db8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08a      	sub	sp, #40	; 0x28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003dc4:	f7fe fd9a 	bl	80028fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003dc8:	4b5b      	ldr	r3, [pc, #364]	; (8003f38 <pvPortMalloc+0x180>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d101      	bne.n	8003dd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003dd0:	f000 f920 	bl	8004014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003dd4:	4b59      	ldr	r3, [pc, #356]	; (8003f3c <pvPortMalloc+0x184>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f040 8093 	bne.w	8003f08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01d      	beq.n	8003e24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003de8:	2208      	movs	r2, #8
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d014      	beq.n	8003e24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f023 0307 	bic.w	r3, r3, #7
 8003e00:	3308      	adds	r3, #8
 8003e02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <pvPortMalloc+0x6c>
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	617b      	str	r3, [r7, #20]
}
 8003e20:	bf00      	nop
 8003e22:	e7fe      	b.n	8003e22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d06e      	beq.n	8003f08 <pvPortMalloc+0x150>
 8003e2a:	4b45      	ldr	r3, [pc, #276]	; (8003f40 <pvPortMalloc+0x188>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d869      	bhi.n	8003f08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003e34:	4b43      	ldr	r3, [pc, #268]	; (8003f44 <pvPortMalloc+0x18c>)
 8003e36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003e38:	4b42      	ldr	r3, [pc, #264]	; (8003f44 <pvPortMalloc+0x18c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e3e:	e004      	b.n	8003e4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d903      	bls.n	8003e5c <pvPortMalloc+0xa4>
 8003e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f1      	bne.n	8003e40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003e5c:	4b36      	ldr	r3, [pc, #216]	; (8003f38 <pvPortMalloc+0x180>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d050      	beq.n	8003f08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003e66:	6a3b      	ldr	r3, [r7, #32]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	4413      	add	r3, r2
 8003e6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	1ad2      	subs	r2, r2, r3
 8003e80:	2308      	movs	r3, #8
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d91f      	bls.n	8003ec8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <pvPortMalloc+0xf8>
	__asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	613b      	str	r3, [r7, #16]
}
 8003eac:	bf00      	nop
 8003eae:	e7fe      	b.n	8003eae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	1ad2      	subs	r2, r2, r3
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003ec2:	69b8      	ldr	r0, [r7, #24]
 8003ec4:	f000 f908 	bl	80040d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003ec8:	4b1d      	ldr	r3, [pc, #116]	; (8003f40 <pvPortMalloc+0x188>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	4a1b      	ldr	r2, [pc, #108]	; (8003f40 <pvPortMalloc+0x188>)
 8003ed4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003ed6:	4b1a      	ldr	r3, [pc, #104]	; (8003f40 <pvPortMalloc+0x188>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b1b      	ldr	r3, [pc, #108]	; (8003f48 <pvPortMalloc+0x190>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d203      	bcs.n	8003eea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003ee2:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <pvPortMalloc+0x188>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <pvPortMalloc+0x190>)
 8003ee8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <pvPortMalloc+0x184>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003efe:	4b13      	ldr	r3, [pc, #76]	; (8003f4c <pvPortMalloc+0x194>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3301      	adds	r3, #1
 8003f04:	4a11      	ldr	r2, [pc, #68]	; (8003f4c <pvPortMalloc+0x194>)
 8003f06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003f08:	f7fe fd06 	bl	8002918 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00a      	beq.n	8003f2c <pvPortMalloc+0x174>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	60fb      	str	r3, [r7, #12]
}
 8003f28:	bf00      	nop
 8003f2a:	e7fe      	b.n	8003f2a <pvPortMalloc+0x172>
	return pvReturn;
 8003f2c:	69fb      	ldr	r3, [r7, #28]
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3728      	adds	r7, #40	; 0x28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	2000496c 	.word	0x2000496c
 8003f3c:	20004980 	.word	0x20004980
 8003f40:	20004970 	.word	0x20004970
 8003f44:	20004964 	.word	0x20004964
 8003f48:	20004974 	.word	0x20004974
 8003f4c:	20004978 	.word	0x20004978

08003f50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d04d      	beq.n	8003ffe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003f62:	2308      	movs	r3, #8
 8003f64:	425b      	negs	r3, r3
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4413      	add	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	4b24      	ldr	r3, [pc, #144]	; (8004008 <vPortFree+0xb8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <vPortFree+0x44>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	60fb      	str	r3, [r7, #12]
}
 8003f90:	bf00      	nop
 8003f92:	e7fe      	b.n	8003f92 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <vPortFree+0x62>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	60bb      	str	r3, [r7, #8]
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	4b14      	ldr	r3, [pc, #80]	; (8004008 <vPortFree+0xb8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d01e      	beq.n	8003ffe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d11a      	bne.n	8003ffe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	4b0e      	ldr	r3, [pc, #56]	; (8004008 <vPortFree+0xb8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	401a      	ands	r2, r3
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003fd8:	f7fe fc90 	bl	80028fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	4b0a      	ldr	r3, [pc, #40]	; (800400c <vPortFree+0xbc>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4a09      	ldr	r2, [pc, #36]	; (800400c <vPortFree+0xbc>)
 8003fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003fea:	6938      	ldr	r0, [r7, #16]
 8003fec:	f000 f874 	bl	80040d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003ff0:	4b07      	ldr	r3, [pc, #28]	; (8004010 <vPortFree+0xc0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	4a06      	ldr	r2, [pc, #24]	; (8004010 <vPortFree+0xc0>)
 8003ff8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003ffa:	f7fe fc8d 	bl	8002918 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ffe:	bf00      	nop
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	20004980 	.word	0x20004980
 800400c:	20004970 	.word	0x20004970
 8004010:	2000497c 	.word	0x2000497c

08004014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800401a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800401e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004020:	4b27      	ldr	r3, [pc, #156]	; (80040c0 <prvHeapInit+0xac>)
 8004022:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00c      	beq.n	8004048 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3307      	adds	r3, #7
 8004032:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f023 0307 	bic.w	r3, r3, #7
 800403a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	4a1f      	ldr	r2, [pc, #124]	; (80040c0 <prvHeapInit+0xac>)
 8004044:	4413      	add	r3, r2
 8004046:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800404c:	4a1d      	ldr	r2, [pc, #116]	; (80040c4 <prvHeapInit+0xb0>)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004052:	4b1c      	ldr	r3, [pc, #112]	; (80040c4 <prvHeapInit+0xb0>)
 8004054:	2200      	movs	r2, #0
 8004056:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	4413      	add	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004060:	2208      	movs	r2, #8
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	1a9b      	subs	r3, r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0307 	bic.w	r3, r3, #7
 800406e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4a15      	ldr	r2, [pc, #84]	; (80040c8 <prvHeapInit+0xb4>)
 8004074:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004076:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <prvHeapInit+0xb4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2200      	movs	r2, #0
 800407c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800407e:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <prvHeapInit+0xb4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	1ad2      	subs	r2, r2, r3
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004094:	4b0c      	ldr	r3, [pc, #48]	; (80040c8 <prvHeapInit+0xb4>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <prvHeapInit+0xb8>)
 80040a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4a09      	ldr	r2, [pc, #36]	; (80040d0 <prvHeapInit+0xbc>)
 80040aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <prvHeapInit+0xc0>)
 80040ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80040b2:	601a      	str	r2, [r3, #0]
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	20000d64 	.word	0x20000d64
 80040c4:	20004964 	.word	0x20004964
 80040c8:	2000496c 	.word	0x2000496c
 80040cc:	20004974 	.word	0x20004974
 80040d0:	20004970 	.word	0x20004970
 80040d4:	20004980 	.word	0x20004980

080040d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80040e0:	4b28      	ldr	r3, [pc, #160]	; (8004184 <prvInsertBlockIntoFreeList+0xac>)
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	e002      	b.n	80040ec <prvInsertBlockIntoFreeList+0x14>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	60fb      	str	r3, [r7, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d8f7      	bhi.n	80040e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4413      	add	r3, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	d108      	bne.n	800411a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	441a      	add	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	441a      	add	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	429a      	cmp	r2, r3
 800412c:	d118      	bne.n	8004160 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <prvInsertBlockIntoFreeList+0xb0>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d00d      	beq.n	8004156 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	441a      	add	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e008      	b.n	8004168 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004156:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <prvInsertBlockIntoFreeList+0xb0>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e003      	b.n	8004168 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d002      	beq.n	8004176 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004176:	bf00      	nop
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	20004964 	.word	0x20004964
 8004188:	2000496c 	.word	0x2000496c

0800418c <__libc_init_array>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	4d0d      	ldr	r5, [pc, #52]	; (80041c4 <__libc_init_array+0x38>)
 8004190:	4c0d      	ldr	r4, [pc, #52]	; (80041c8 <__libc_init_array+0x3c>)
 8004192:	1b64      	subs	r4, r4, r5
 8004194:	10a4      	asrs	r4, r4, #2
 8004196:	2600      	movs	r6, #0
 8004198:	42a6      	cmp	r6, r4
 800419a:	d109      	bne.n	80041b0 <__libc_init_array+0x24>
 800419c:	4d0b      	ldr	r5, [pc, #44]	; (80041cc <__libc_init_array+0x40>)
 800419e:	4c0c      	ldr	r4, [pc, #48]	; (80041d0 <__libc_init_array+0x44>)
 80041a0:	f000 f82e 	bl	8004200 <_init>
 80041a4:	1b64      	subs	r4, r4, r5
 80041a6:	10a4      	asrs	r4, r4, #2
 80041a8:	2600      	movs	r6, #0
 80041aa:	42a6      	cmp	r6, r4
 80041ac:	d105      	bne.n	80041ba <__libc_init_array+0x2e>
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
 80041b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b4:	4798      	blx	r3
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7ee      	b.n	8004198 <__libc_init_array+0xc>
 80041ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80041be:	4798      	blx	r3
 80041c0:	3601      	adds	r6, #1
 80041c2:	e7f2      	b.n	80041aa <__libc_init_array+0x1e>
 80041c4:	08004278 	.word	0x08004278
 80041c8:	08004278 	.word	0x08004278
 80041cc:	08004278 	.word	0x08004278
 80041d0:	0800427c 	.word	0x0800427c

080041d4 <memcpy>:
 80041d4:	440a      	add	r2, r1
 80041d6:	4291      	cmp	r1, r2
 80041d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80041dc:	d100      	bne.n	80041e0 <memcpy+0xc>
 80041de:	4770      	bx	lr
 80041e0:	b510      	push	{r4, lr}
 80041e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041ea:	4291      	cmp	r1, r2
 80041ec:	d1f9      	bne.n	80041e2 <memcpy+0xe>
 80041ee:	bd10      	pop	{r4, pc}

080041f0 <memset>:
 80041f0:	4402      	add	r2, r0
 80041f2:	4603      	mov	r3, r0
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d100      	bne.n	80041fa <memset+0xa>
 80041f8:	4770      	bx	lr
 80041fa:	f803 1b01 	strb.w	r1, [r3], #1
 80041fe:	e7f9      	b.n	80041f4 <memset+0x4>

08004200 <_init>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	bf00      	nop
 8004204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004206:	bc08      	pop	{r3}
 8004208:	469e      	mov	lr, r3
 800420a:	4770      	bx	lr

0800420c <_fini>:
 800420c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420e:	bf00      	nop
 8004210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004212:	bc08      	pop	{r3}
 8004214:	469e      	mov	lr, r3
 8004216:	4770      	bx	lr
