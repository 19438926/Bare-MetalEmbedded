
FlashLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000021c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c8  080003d0  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c8  080003c8  000103d0  2**0
                  CONTENTS
  4 .ARM          00000000  080003c8  080003c8  000103d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c8  080003d0  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003cc  080003cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103d0  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000438  00000000  00000000  00010400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000f7  00000000  00000000  00010838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000060  00000000  00000000  00010930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000048  00000000  00000000  00010990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a205  00000000  00000000  000109d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000545  00000000  00000000  0002abdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092cac  00000000  00000000  0002b122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000bddce  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000b4  00000000  00000000  000bde20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003b0 	.word	0x080003b0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003b0 	.word	0x080003b0

080001ec <main>:
 * @brief main
 * Main entry point, carries out initialisation and calling all sub-systems within eternal loop.
 * @param None
 * @retval None
 */
int main(void){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	//Initialise to use external clock , enable relevant gpio and peripheral etc.
	Micro_Initialisation();
 80001f0:	f000 f80a 	bl	8000208 <Micro_Initialisation>

    /******************/
    /* Loop forever */
	while(1){
	GPIOG->ODR ^=LED_PIN;//inverts the specific bit
 80001f4:	4b03      	ldr	r3, [pc, #12]	; (8000204 <main+0x18>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a02      	ldr	r2, [pc, #8]	; (8000204 <main+0x18>)
 80001fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001fe:	6153      	str	r3, [r2, #20]
 8000200:	e7f8      	b.n	80001f4 <main+0x8>
 8000202:	bf00      	nop
 8000204:	40021800 	.word	0x40021800

08000208 <Micro_Initialisation>:
 * @brief   Micro_Initialisation
 * This function configures the micro clocks ,gpio and peripherals used by the system
 * @param None
 * @retval None
 */
void Micro_Initialisation(void){
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	//configure chip to use external clock source.
	Initialise_External_Clock();
 800020c:	f000 f804 	bl	8000218 <Initialise_External_Clock>

	//Initialise any GPIO required.
	Initialise_GPIO();
 8000210:	f000 f862 	bl	80002d8 <Initialise_GPIO>
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}

08000218 <Initialise_External_Clock>:
 * @brief Initialise External Clock
 * This function configures the mirco to use external 8MHz clock source.
 * @param None
 * @retval None
 */
void Initialise_External_Clock (void){
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0


    //Enable HSE and wait for the HSE to become ready
	RCC->CR |= RCC_CR_HSEON;
 800021c:	4b2a      	ldr	r3, [pc, #168]	; (80002c8 <Initialise_External_Clock+0xb0>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a29      	ldr	r2, [pc, #164]	; (80002c8 <Initialise_External_Clock+0xb0>)
 8000222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000226:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 8000228:	bf00      	nop
 800022a:	4b27      	ldr	r3, [pc, #156]	; (80002c8 <Initialise_External_Clock+0xb0>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000232:	2b00      	cmp	r3, #0
 8000234:	d0f9      	beq.n	800022a <Initialise_External_Clock+0x12>


	//Set the power enable clock and voltage regulator
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000236:	4b24      	ldr	r3, [pc, #144]	; (80002c8 <Initialise_External_Clock+0xb0>)
 8000238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800023a:	4a23      	ldr	r2, [pc, #140]	; (80002c8 <Initialise_External_Clock+0xb0>)
 800023c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000240:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR |= PWR_CR_VOS;
 8000242:	4b22      	ldr	r3, [pc, #136]	; (80002cc <Initialise_External_Clock+0xb4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a21      	ldr	r2, [pc, #132]	; (80002cc <Initialise_External_Clock+0xb4>)
 8000248:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800024c:	6013      	str	r3, [r2, #0]

	//Configure the FLASH Pre-fetch and Latency related settings
	FLASH->ACR |= FLASH_ACR_DCEN | FLASH_ACR_ICEN | FLASH_ACR_PRFTEN
 800024e:	4b20      	ldr	r3, [pc, #128]	; (80002d0 <Initialise_External_Clock+0xb8>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	4a1f      	ldr	r2, [pc, #124]	; (80002d0 <Initialise_External_Clock+0xb8>)
 8000254:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000258:	f043 0302 	orr.w	r3, r3, #2
 800025c:	6013      	str	r3, [r2, #0]
			| FLASH_ACR_LATENCY_2WS;

    //Configure the Prescalers HCLK,PCLK1 AND PCLK2
    //AHB Prescaler
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <Initialise_External_Clock+0xb0>)
 8000260:	4a19      	ldr	r2, [pc, #100]	; (80002c8 <Initialise_External_Clock+0xb0>)
 8000262:	689b      	ldr	r3, [r3, #8]
 8000264:	6093      	str	r3, [r2, #8]
    //APB1 Prescaler
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000266:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <Initialise_External_Clock+0xb0>)
 8000268:	689b      	ldr	r3, [r3, #8]
 800026a:	4a17      	ldr	r2, [pc, #92]	; (80002c8 <Initialise_External_Clock+0xb0>)
 800026c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000270:	6093      	str	r3, [r2, #8]
    //APB2 Prescaler
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000272:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <Initialise_External_Clock+0xb0>)
 8000274:	4a14      	ldr	r2, [pc, #80]	; (80002c8 <Initialise_External_Clock+0xb0>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	6093      	str	r3, [r2, #8]

    //Configure the Main PLL
	RCC->PLLCFGR |= (PLL_M << 0) | (PLL_N << 6) | (PLL_P << 16) | (PLL_Q << 24)
 800027a:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <Initialise_External_Clock+0xb0>)
 800027c:	685a      	ldr	r2, [r3, #4]
 800027e:	4912      	ldr	r1, [pc, #72]	; (80002c8 <Initialise_External_Clock+0xb0>)
 8000280:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <Initialise_External_Clock+0xbc>)
 8000282:	4313      	orrs	r3, r2
 8000284:	604b      	str	r3, [r1, #4]
			| (PLL_SRC << 22);

    //Enable the PLL and wait ready
	RCC->CR |= RCC_CR_PLLON;
 8000286:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <Initialise_External_Clock+0xb0>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <Initialise_External_Clock+0xb0>)
 800028c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000290:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY));
 8000292:	bf00      	nop
 8000294:	4b0c      	ldr	r3, [pc, #48]	; (80002c8 <Initialise_External_Clock+0xb0>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0f9      	beq.n	8000294 <Initialise_External_Clock+0x7c>


    //Select the clock source and wait for it to be set
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <Initialise_External_Clock+0xb0>)
 80002a2:	689b      	ldr	r3, [r3, #8]
 80002a4:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <Initialise_External_Clock+0xb0>)
 80002a6:	f043 0302 	orr.w	r3, r3, #2
 80002aa:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80002ac:	bf00      	nop
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <Initialise_External_Clock+0xb0>)
 80002b0:	689b      	ldr	r3, [r3, #8]
 80002b2:	f003 030c 	and.w	r3, r3, #12
 80002b6:	2b08      	cmp	r3, #8
 80002b8:	d1f9      	bne.n	80002ae <Initialise_External_Clock+0x96>

}
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40023800 	.word	0x40023800
 80002cc:	40007000 	.word	0x40007000
 80002d0:	40023c00 	.word	0x40023c00
 80002d4:	03401204 	.word	0x03401204

080002d8 <Initialise_GPIO>:
 * PG13: Green LED.
 *
 * @param None
 * @retval None
 */
void Initialise_GPIO (void){
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
    //Enable clock access to GPIOG
     RCC->AHB1ENR |= RCC_AHB1ENR_GPIOGEN;
 80002dc:	4b0b      	ldr	r3, [pc, #44]	; (800030c <Initialise_GPIO+0x34>)
 80002de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e0:	4a0a      	ldr	r2, [pc, #40]	; (800030c <Initialise_GPIO+0x34>)
 80002e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002e6:	6313      	str	r3, [r2, #48]	; 0x30
     //Set PG13 as output
	 GPIOG->MODER |= (1 << 26);
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <Initialise_GPIO+0x38>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a08      	ldr	r2, [pc, #32]	; (8000310 <Initialise_GPIO+0x38>)
 80002ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002f2:	6013      	str	r3, [r2, #0]
	 GPIOG->MODER &= ~(1 << 27);
 80002f4:	4b06      	ldr	r3, [pc, #24]	; (8000310 <Initialise_GPIO+0x38>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a05      	ldr	r2, [pc, #20]	; (8000310 <Initialise_GPIO+0x38>)
 80002fa:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80002fe:	6013      	str	r3, [r2, #0]
  }
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40023800 	.word	0x40023800
 8000310:	40021800 	.word	0x40021800

08000314 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000314:	480d      	ldr	r0, [pc, #52]	; (800034c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000316:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000318:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <LoopForever+0x6>)
  ldr r1, =_edata
 800031e:	490d      	ldr	r1, [pc, #52]	; (8000354 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000320:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <LoopForever+0xe>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000324:	e002      	b.n	800032c <LoopCopyDataInit>

08000326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032a:	3304      	adds	r3, #4

0800032c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800032c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000330:	d3f9      	bcc.n	8000326 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000332:	4a0a      	ldr	r2, [pc, #40]	; (800035c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000334:	4c0a      	ldr	r4, [pc, #40]	; (8000360 <LoopForever+0x16>)
  movs r3, #0
 8000336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000338:	e001      	b.n	800033e <LoopFillZerobss>

0800033a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800033c:	3204      	adds	r2, #4

0800033e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000340:	d3fb      	bcc.n	800033a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000342:	f000 f811 	bl	8000368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000346:	f7ff ff51 	bl	80001ec <main>

0800034a <LoopForever>:

LoopForever:
  b LoopForever
 800034a:	e7fe      	b.n	800034a <LoopForever>
  ldr   r0, =_estack
 800034c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000354:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000358:	080003d0 	.word	0x080003d0
  ldr r2, =_sbss
 800035c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000360:	2000001c 	.word	0x2000001c

08000364 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000364:	e7fe      	b.n	8000364 <ADC_IRQHandler>
	...

08000368 <__libc_init_array>:
 8000368:	b570      	push	{r4, r5, r6, lr}
 800036a:	4d0d      	ldr	r5, [pc, #52]	; (80003a0 <__libc_init_array+0x38>)
 800036c:	4c0d      	ldr	r4, [pc, #52]	; (80003a4 <__libc_init_array+0x3c>)
 800036e:	1b64      	subs	r4, r4, r5
 8000370:	10a4      	asrs	r4, r4, #2
 8000372:	2600      	movs	r6, #0
 8000374:	42a6      	cmp	r6, r4
 8000376:	d109      	bne.n	800038c <__libc_init_array+0x24>
 8000378:	4d0b      	ldr	r5, [pc, #44]	; (80003a8 <__libc_init_array+0x40>)
 800037a:	4c0c      	ldr	r4, [pc, #48]	; (80003ac <__libc_init_array+0x44>)
 800037c:	f000 f818 	bl	80003b0 <_init>
 8000380:	1b64      	subs	r4, r4, r5
 8000382:	10a4      	asrs	r4, r4, #2
 8000384:	2600      	movs	r6, #0
 8000386:	42a6      	cmp	r6, r4
 8000388:	d105      	bne.n	8000396 <__libc_init_array+0x2e>
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000390:	4798      	blx	r3
 8000392:	3601      	adds	r6, #1
 8000394:	e7ee      	b.n	8000374 <__libc_init_array+0xc>
 8000396:	f855 3b04 	ldr.w	r3, [r5], #4
 800039a:	4798      	blx	r3
 800039c:	3601      	adds	r6, #1
 800039e:	e7f2      	b.n	8000386 <__libc_init_array+0x1e>
 80003a0:	080003c8 	.word	0x080003c8
 80003a4:	080003c8 	.word	0x080003c8
 80003a8:	080003c8 	.word	0x080003c8
 80003ac:	080003cc 	.word	0x080003cc

080003b0 <_init>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	bf00      	nop
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr

080003bc <_fini>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr
